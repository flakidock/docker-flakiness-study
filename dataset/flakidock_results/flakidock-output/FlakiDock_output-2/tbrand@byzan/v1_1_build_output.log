#0 building with "default" instance using docker driver

#1 [internal] load .dockerignore
#1 transferring context:
#1 transferring context: 65B done
#1 DONE 0.5s

#2 [internal] load build definition from v1_Dockerfile
#2 transferring dockerfile: 521B done
#2 DONE 0.7s

#3 [internal] load metadata for docker.io/library/rust:stretch
#3 DONE 0.5s

#4 [internal] load build context
#4 DONE 0.0s

#5 [1/8] FROM docker.io/library/rust:stretch@sha256:5cc6a12ecb898eb730349358ee6f679cbd3f437fdf6a608bf56d2d8e9ea444dd
#5 resolve docker.io/library/rust:stretch@sha256:5cc6a12ecb898eb730349358ee6f679cbd3f437fdf6a608bf56d2d8e9ea444dd
#5 resolve docker.io/library/rust:stretch@sha256:5cc6a12ecb898eb730349358ee6f679cbd3f437fdf6a608bf56d2d8e9ea444dd 0.3s done
#5 sha256:5cc6a12ecb898eb730349358ee6f679cbd3f437fdf6a608bf56d2d8e9ea444dd 988B / 988B done
#5 sha256:733f81d78276ed8d9afd0240cbd73123deef087ff72f29b99fbd16f8fc634e8d 1.59kB / 1.59kB done
#5 sha256:22af326201de0d8de5534c176b42977366e5662952ce22505bad9ea2b3778227 6.45kB / 6.45kB done
#5 sha256:de30e8b35015c7302e071e9c2b449290f270feaf2a419f6466a555b6907e7d72 1.05MB / 4.34MB 0.3s
#5 ...

#4 [internal] load build context
#4 transferring context: 219.07kB done
#4 DONE 0.6s

#5 [1/8] FROM docker.io/library/rust:stretch@sha256:5cc6a12ecb898eb730349358ee6f679cbd3f437fdf6a608bf56d2d8e9ea444dd
#5 sha256:de30e8b35015c7302e071e9c2b449290f270feaf2a419f6466a555b6907e7d72 3.15MB / 4.34MB 0.4s
#5 sha256:de30e8b35015c7302e071e9c2b449290f270feaf2a419f6466a555b6907e7d72 4.34MB / 4.34MB 0.6s
#5 sha256:419e7ae5bb1e4875c367f3249b7bb7f8f39dd27dfceb4ee9d6a92191ed1c452f 2.10MB / 45.37MB 0.6s
#5 sha256:848839e0cd3b3acc96db8a39c4520a40f98dc8f3a2a5f80b575ff4a1c88f1fcf 0B / 10.75MB 0.6s
#5 sha256:de30e8b35015c7302e071e9c2b449290f270feaf2a419f6466a555b6907e7d72 4.34MB / 4.34MB 0.6s done
#5 sha256:419e7ae5bb1e4875c367f3249b7bb7f8f39dd27dfceb4ee9d6a92191ed1c452f 8.39MB / 45.37MB 0.8s
#5 sha256:848839e0cd3b3acc96db8a39c4520a40f98dc8f3a2a5f80b575ff4a1c88f1fcf 6.29MB / 10.75MB 0.8s
#5 sha256:258fdea6ea480a97ea4bfe331e7dc9e027edbb0a18781d0d85ca1acc80b7a596 0B / 50.09MB 0.8s
#5 sha256:419e7ae5bb1e4875c367f3249b7bb7f8f39dd27dfceb4ee9d6a92191ed1c452f 13.63MB / 45.37MB 1.0s
#5 sha256:848839e0cd3b3acc96db8a39c4520a40f98dc8f3a2a5f80b575ff4a1c88f1fcf 10.75MB / 10.75MB 1.0s
#5 sha256:419e7ae5bb1e4875c367f3249b7bb7f8f39dd27dfceb4ee9d6a92191ed1c452f 19.92MB / 45.37MB 1.2s
#5 sha256:848839e0cd3b3acc96db8a39c4520a40f98dc8f3a2a5f80b575ff4a1c88f1fcf 10.75MB / 10.75MB 1.0s done
#5 sha256:258fdea6ea480a97ea4bfe331e7dc9e027edbb0a18781d0d85ca1acc80b7a596 5.24MB / 50.09MB 1.2s
#5 sha256:ddb75eb7f1e9dbc6a664cc565100358a6d164b34df7105fe17b8c93367ad3336 0B / 214.24MB 1.2s
#5 sha256:258fdea6ea480a97ea4bfe331e7dc9e027edbb0a18781d0d85ca1acc80b7a596 8.39MB / 50.09MB 1.3s
#5 sha256:419e7ae5bb1e4875c367f3249b7bb7f8f39dd27dfceb4ee9d6a92191ed1c452f 29.36MB / 45.37MB 1.5s
#5 sha256:258fdea6ea480a97ea4bfe331e7dc9e027edbb0a18781d0d85ca1acc80b7a596 15.73MB / 50.09MB 1.5s
#5 sha256:419e7ae5bb1e4875c367f3249b7bb7f8f39dd27dfceb4ee9d6a92191ed1c452f 35.65MB / 45.37MB 1.7s
#5 sha256:258fdea6ea480a97ea4bfe331e7dc9e027edbb0a18781d0d85ca1acc80b7a596 25.17MB / 50.09MB 1.7s
#5 sha256:ddb75eb7f1e9dbc6a664cc565100358a6d164b34df7105fe17b8c93367ad3336 17.83MB / 214.24MB 1.7s
#5 sha256:419e7ae5bb1e4875c367f3249b7bb7f8f39dd27dfceb4ee9d6a92191ed1c452f 38.80MB / 45.37MB 1.8s
#5 sha256:258fdea6ea480a97ea4bfe331e7dc9e027edbb0a18781d0d85ca1acc80b7a596 30.41MB / 50.09MB 1.8s
#5 sha256:419e7ae5bb1e4875c367f3249b7bb7f8f39dd27dfceb4ee9d6a92191ed1c452f 45.37MB / 45.37MB 2.0s
#5 sha256:258fdea6ea480a97ea4bfe331e7dc9e027edbb0a18781d0d85ca1acc80b7a596 38.85MB / 50.09MB 2.0s
#5 sha256:ddb75eb7f1e9dbc6a664cc565100358a6d164b34df7105fe17b8c93367ad3336 30.41MB / 214.24MB 2.0s
#5 sha256:258fdea6ea480a97ea4bfe331e7dc9e027edbb0a18781d0d85ca1acc80b7a596 46.14MB / 50.09MB 2.1s
#5 sha256:258fdea6ea480a97ea4bfe331e7dc9e027edbb0a18781d0d85ca1acc80b7a596 50.09MB / 50.09MB 2.3s
#5 sha256:ddb75eb7f1e9dbc6a664cc565100358a6d164b34df7105fe17b8c93367ad3336 45.09MB / 214.24MB 2.3s
#5 sha256:ddb75eb7f1e9dbc6a664cc565100358a6d164b34df7105fe17b8c93367ad3336 65.01MB / 214.24MB 2.7s
#5 sha256:419e7ae5bb1e4875c367f3249b7bb7f8f39dd27dfceb4ee9d6a92191ed1c452f 45.37MB / 45.37MB 2.7s done
#5 extracting sha256:419e7ae5bb1e4875c367f3249b7bb7f8f39dd27dfceb4ee9d6a92191ed1c452f
#5 sha256:ddb75eb7f1e9dbc6a664cc565100358a6d164b34df7105fe17b8c93367ad3336 79.69MB / 214.24MB 2.9s
#5 sha256:ddb75eb7f1e9dbc6a664cc565100358a6d164b34df7105fe17b8c93367ad3336 91.23MB / 214.24MB 3.2s
#5 sha256:258fdea6ea480a97ea4bfe331e7dc9e027edbb0a18781d0d85ca1acc80b7a596 50.09MB / 50.09MB 3.5s done
#5 sha256:ddb75eb7f1e9dbc6a664cc565100358a6d164b34df7105fe17b8c93367ad3336 105.91MB / 214.24MB 3.5s
#5 sha256:0ef1a4bb63b2739f93c05ac82c3169f817372fc7ed2a6a8689f0fa92fa549272 0B / 114.44MB 3.6s
#5 sha256:ddb75eb7f1e9dbc6a664cc565100358a6d164b34df7105fe17b8c93367ad3336 121.63MB / 214.24MB 3.7s
#5 sha256:ddb75eb7f1e9dbc6a664cc565100358a6d164b34df7105fe17b8c93367ad3336 145.75MB / 214.24MB 4.0s
#5 sha256:0ef1a4bb63b2739f93c05ac82c3169f817372fc7ed2a6a8689f0fa92fa549272 8.39MB / 114.44MB 4.0s
#5 sha256:ddb75eb7f1e9dbc6a664cc565100358a6d164b34df7105fe17b8c93367ad3336 159.38MB / 214.24MB 4.3s
#5 sha256:0ef1a4bb63b2739f93c05ac82c3169f817372fc7ed2a6a8689f0fa92fa549272 24.12MB / 114.44MB 4.3s
#5 sha256:ddb75eb7f1e9dbc6a664cc565100358a6d164b34df7105fe17b8c93367ad3336 173.02MB / 214.24MB 4.5s
#5 sha256:0ef1a4bb63b2739f93c05ac82c3169f817372fc7ed2a6a8689f0fa92fa549272 34.60MB / 114.44MB 4.5s
#5 sha256:0ef1a4bb63b2739f93c05ac82c3169f817372fc7ed2a6a8689f0fa92fa549272 44.04MB / 114.44MB 4.7s
#5 sha256:ddb75eb7f1e9dbc6a664cc565100358a6d164b34df7105fe17b8c93367ad3336 188.74MB / 214.24MB 4.8s
#5 sha256:0ef1a4bb63b2739f93c05ac82c3169f817372fc7ed2a6a8689f0fa92fa549272 53.48MB / 114.44MB 4.9s
#5 sha256:ddb75eb7f1e9dbc6a664cc565100358a6d164b34df7105fe17b8c93367ad3336 208.67MB / 214.24MB 5.1s
#5 sha256:0ef1a4bb63b2739f93c05ac82c3169f817372fc7ed2a6a8689f0fa92fa549272 63.96MB / 114.44MB 5.1s
#5 sha256:0ef1a4bb63b2739f93c05ac82c3169f817372fc7ed2a6a8689f0fa92fa549272 76.55MB / 114.44MB 5.3s
#5 sha256:0ef1a4bb63b2739f93c05ac82c3169f817372fc7ed2a6a8689f0fa92fa549272 87.03MB / 114.44MB 5.5s
#5 sha256:0ef1a4bb63b2739f93c05ac82c3169f817372fc7ed2a6a8689f0fa92fa549272 102.76MB / 114.44MB 5.7s
#5 sha256:0ef1a4bb63b2739f93c05ac82c3169f817372fc7ed2a6a8689f0fa92fa549272 113.25MB / 114.44MB 5.9s
#5 extracting sha256:419e7ae5bb1e4875c367f3249b7bb7f8f39dd27dfceb4ee9d6a92191ed1c452f 3.1s done
#5 sha256:ddb75eb7f1e9dbc6a664cc565100358a6d164b34df7105fe17b8c93367ad3336 214.24MB / 214.24MB 8.4s done
#5 sha256:0ef1a4bb63b2739f93c05ac82c3169f817372fc7ed2a6a8689f0fa92fa549272 114.44MB / 114.44MB 10.1s done
#5 extracting sha256:848839e0cd3b3acc96db8a39c4520a40f98dc8f3a2a5f80b575ff4a1c88f1fcf
#5 extracting sha256:848839e0cd3b3acc96db8a39c4520a40f98dc8f3a2a5f80b575ff4a1c88f1fcf 0.5s done
#5 extracting sha256:de30e8b35015c7302e071e9c2b449290f270feaf2a419f6466a555b6907e7d72
#5 extracting sha256:de30e8b35015c7302e071e9c2b449290f270feaf2a419f6466a555b6907e7d72 0.3s done
#5 extracting sha256:258fdea6ea480a97ea4bfe331e7dc9e027edbb0a18781d0d85ca1acc80b7a596
#5 extracting sha256:258fdea6ea480a97ea4bfe331e7dc9e027edbb0a18781d0d85ca1acc80b7a596 3.2s done
#5 extracting sha256:ddb75eb7f1e9dbc6a664cc565100358a6d164b34df7105fe17b8c93367ad3336
#5 extracting sha256:ddb75eb7f1e9dbc6a664cc565100358a6d164b34df7105fe17b8c93367ad3336 5.1s
#5 extracting sha256:ddb75eb7f1e9dbc6a664cc565100358a6d164b34df7105fe17b8c93367ad3336 10.1s
#5 extracting sha256:ddb75eb7f1e9dbc6a664cc565100358a6d164b34df7105fe17b8c93367ad3336 13.6s done
#5 extracting sha256:0ef1a4bb63b2739f93c05ac82c3169f817372fc7ed2a6a8689f0fa92fa549272
#5 extracting sha256:0ef1a4bb63b2739f93c05ac82c3169f817372fc7ed2a6a8689f0fa92fa549272 5.1s
#5 extracting sha256:0ef1a4bb63b2739f93c05ac82c3169f817372fc7ed2a6a8689f0fa92fa549272 6.4s done
#5 DONE 41.3s

#6 [2/8] WORKDIR /usr/local/byzan
#6 DONE 25.6s

#7 [3/8] COPY . .
#7 DONE 0.5s

#8 [4/8] RUN echo "deb http://archive.debian.org/debian stretch main" > /etc/apt/sources.list &&     echo "deb http://archive.debian.org/debian-security stretch/updates main" >> /etc/apt/sources.list &&     apt-get update -y && apt-get install cmake golang -y
#8 1.026 Ign:1 http://archive.debian.org/debian stretch InRelease
#8 1.029 Get:2 http://archive.debian.org/debian-security stretch/updates InRelease [59.1 kB]
#8 1.039 Get:3 http://archive.debian.org/debian stretch Release [118 kB]
#8 1.045 Get:4 http://archive.debian.org/debian stretch Release.gpg [3177 B]
#8 1.148 Get:5 http://archive.debian.org/debian-security stretch/updates/main amd64 Packages [782 kB]
#8 1.254 Get:6 http://archive.debian.org/debian stretch/main amd64 Packages [7080 kB]
#8 2.544 Fetched 8042 kB in 1s (4349 kB/s)
#8 2.544 Reading package lists...
#8 3.252 Reading package lists...
#8 3.943 Building dependency tree...
#8 4.047 Reading state information...
#8 4.128 The following additional packages will be installed:
#8 4.128   cmake-data golang-1.7 golang-1.7-doc golang-1.7-go golang-1.7-src golang-doc
#8 4.128   golang-go golang-src libarchive13 libjsoncpp1 libuv1
#8 4.129 Suggested packages:
#8 4.129   codeblocks eclipse ninja-build lrzip
#8 4.186 The following NEW packages will be installed:
#8 4.186   cmake cmake-data golang golang-1.7 golang-1.7-doc golang-1.7-go
#8 4.186   golang-1.7-src golang-doc golang-go golang-src libarchive13 libjsoncpp1
#8 4.187   libuv1
#8 4.203 0 upgraded, 13 newly installed, 0 to remove and 140 not upgraded.
#8 4.203 Need to get 34.2 MB of archives.
#8 4.203 After this operation, 171 MB of additional disk space will be used.
#8 4.203 Get:1 http://archive.debian.org/debian stretch/main amd64 cmake-data all 3.7.2-1 [1216 kB]
#8 4.225 Get:2 http://archive.debian.org/debian-security stretch/updates/main amd64 libarchive13 amd64 3.2.2-2+deb9u3 [295 kB]
#8 4.231 Get:3 http://archive.debian.org/debian stretch/main amd64 libjsoncpp1 amd64 1.7.4-3 [75.6 kB]
#8 4.240 Get:4 http://archive.debian.org/debian stretch/main amd64 libuv1 amd64 1.9.1-3 [84.4 kB]
#8 4.243 Get:5 http://archive.debian.org/debian stretch/main amd64 cmake amd64 3.7.2-1 [3038 kB]
#8 4.560 Get:6 http://archive.debian.org/debian-security stretch/updates/main amd64 golang-1.7-src amd64 1.7.4-2+deb9u5 [7686 kB]
#8 5.854 Get:7 http://archive.debian.org/debian-security stretch/updates/main amd64 golang-1.7-go amd64 1.7.4-2+deb9u5 [19.4 MB]
#8 7.533 Get:8 http://archive.debian.org/debian-security stretch/updates/main amd64 golang-1.7-doc all 1.7.4-2+deb9u5 [2393 kB]
#8 8.362 Get:9 http://archive.debian.org/debian-security stretch/updates/main amd64 golang-1.7 all 1.7.4-2+deb9u5 [28.5 kB]
#8 8.377 Get:10 http://archive.debian.org/debian stretch/main amd64 golang-src amd64 2:1.7~5 [3560 B]
#8 8.379 Get:11 http://archive.debian.org/debian stretch/main amd64 golang-go amd64 2:1.7~5 [22.7 kB]
#8 8.681 Get:12 http://archive.debian.org/debian stretch/main amd64 golang-doc all 2:1.7~5 [3600 B]
#8 8.984 Get:13 http://archive.debian.org/debian stretch/main amd64 golang amd64 2:1.7~5 [3540 B]
#8 9.220 debconf: delaying package configuration, since apt-utils is not installed
#8 9.278 Fetched 34.2 MB in 4s (7147 kB/s)
#8 9.448 Selecting previously unselected package cmake-data.
#8 9.448 (Reading database ... (Reading database ... 5%(Reading database ... 10%(Reading database ... 15%(Reading database ... 20%(Reading database ... 25%(Reading database ... 30%(Reading database ... 35%(Reading database ... 40%(Reading database ... 45%(Reading database ... 50%(Reading database ... 55%(Reading database ... 60%(Reading database ... 65%(Reading database ... 70%(Reading database ... 75%(Reading database ... 80%(Reading database ... 85%(Reading database ... 90%(Reading database ... 95%(Reading database ... 100%(Reading database ... 29929 files and directories currently installed.)
#8 9.462 Preparing to unpack .../00-cmake-data_3.7.2-1_all.deb ...
#8 9.487 Unpacking cmake-data (3.7.2-1) ...
#8 10.28 Selecting previously unselected package libarchive13:amd64.
#8 10.28 Preparing to unpack .../01-libarchive13_3.2.2-2+deb9u3_amd64.deb ...
#8 10.33 Unpacking libarchive13:amd64 (3.2.2-2+deb9u3) ...
#8 10.59 Selecting previously unselected package libjsoncpp1:amd64.
#8 10.59 Preparing to unpack .../02-libjsoncpp1_1.7.4-3_amd64.deb ...
#8 10.62 Unpacking libjsoncpp1:amd64 (1.7.4-3) ...
#8 10.91 Selecting previously unselected package libuv1:amd64.
#8 10.91 Preparing to unpack .../03-libuv1_1.9.1-3_amd64.deb ...
#8 10.94 Unpacking libuv1:amd64 (1.9.1-3) ...
#8 11.18 Selecting previously unselected package cmake.
#8 11.18 Preparing to unpack .../04-cmake_3.7.2-1_amd64.deb ...
#8 11.23 Unpacking cmake (3.7.2-1) ...
#8 11.83 Selecting previously unselected package golang-1.7-src.
#8 11.83 Preparing to unpack .../05-golang-1.7-src_1.7.4-2+deb9u5_amd64.deb ...
#8 11.86 Unpacking golang-1.7-src (1.7.4-2+deb9u5) ...
#8 14.74 Selecting previously unselected package golang-1.7-go.
#8 14.74 Preparing to unpack .../06-golang-1.7-go_1.7.4-2+deb9u5_amd64.deb ...
#8 14.76 Unpacking golang-1.7-go (1.7.4-2+deb9u5) ...
#8 17.23 Selecting previously unselected package golang-1.7-doc.
#8 17.23 Preparing to unpack .../07-golang-1.7-doc_1.7.4-2+deb9u5_all.deb ...
#8 17.25 Unpacking golang-1.7-doc (1.7.4-2+deb9u5) ...
#8 17.66 Selecting previously unselected package golang-1.7.
#8 17.66 Preparing to unpack .../08-golang-1.7_1.7.4-2+deb9u5_all.deb ...
#8 17.69 Unpacking golang-1.7 (1.7.4-2+deb9u5) ...
#8 17.85 Selecting previously unselected package golang-src.
#8 17.85 Preparing to unpack .../09-golang-src_2%3a1.7~5_amd64.deb ...
#8 17.88 Unpacking golang-src (2:1.7~5) ...
#8 18.21 Selecting previously unselected package golang-go.
#8 18.21 Preparing to unpack .../10-golang-go_2%3a1.7~5_amd64.deb ...
#8 18.25 Unpacking golang-go (2:1.7~5) ...
#8 18.39 Selecting previously unselected package golang-doc.
#8 18.39 Preparing to unpack .../11-golang-doc_2%3a1.7~5_all.deb ...
#8 18.41 Unpacking golang-doc (2:1.7~5) ...
#8 18.56 Selecting previously unselected package golang.
#8 18.56 Preparing to unpack .../12-golang_2%3a1.7~5_amd64.deb ...
#8 18.59 Unpacking golang (2:1.7~5) ...
#8 18.78 Setting up libarchive13:amd64 (3.2.2-2+deb9u3) ...
#8 18.85 Setting up libuv1:amd64 (1.9.1-3) ...
#8 18.92 Setting up cmake-data (3.7.2-1) ...
#8 19.02 Processing triggers for libc-bin (2.24-11+deb9u4) ...
#8 19.10 Setting up golang-1.7-src (1.7.4-2+deb9u5) ...
#8 19.18 Setting up libjsoncpp1:amd64 (1.7.4-3) ...
#8 19.28 Setting up golang-src (2:1.7~5) ...
#8 19.35 Setting up golang-1.7-go (1.7.4-2+deb9u5) ...
#8 19.65 Setting up golang-1.7-doc (1.7.4-2+deb9u5) ...
#8 19.72 Setting up cmake (3.7.2-1) ...
#8 19.82 Setting up golang-go (2:1.7~5) ...
#8 19.90 Setting up golang-1.7 (1.7.4-2+deb9u5) ...
#8 19.97 Setting up golang-doc (2:1.7~5) ...
#8 20.05 Setting up golang (2:1.7~5) ...
#8 20.13 Processing triggers for libc-bin (2.24-11+deb9u4) ...
#8 DONE 20.9s

#9 [5/8] RUN rustup default stable
#9 0.708 info: syncing channel updates for 'stable-x86_64-unknown-linux-gnu'
#9 1.155 info: latest update on 2024-07-25, rust version 1.80.0 (051478957 2024-07-21)
#9 1.155 info: downloading component 'cargo'
#9 1.390 info: downloading component 'rust-std'
#9 2.015 info: downloading component 'rustc'
#9 3.632 info: installing component 'cargo'
#9 3.635 info: Defaulting to 500.0 MiB unpack ram
#9 4.593 info: installing component 'rust-std'
#9 7.927 info: installing component 'rustc'
#9 14.50 
#9 14.50 info: default toolchain set to 'stable-x86_64-unknown-linux-gnu'
#9 14.52   stable-x86_64-unknown-linux-gnu installed - rustc 1.80.0 (051478957 2024-07-21)
#9 14.52 
#9 DONE 22.4s

#10 [6/8] RUN cargo install protobuf-codegen
#10 0.768     Updating crates.io index
#10 0.916  Downloading crates ...
#10 1.305   Downloaded protobuf-codegen v3.5.0
#10 1.452   Installing protobuf-codegen v3.5.0
#10 1.517     Updating crates.io index
#10 1.865      Locking 42 packages to latest compatible versions
#10 1.866       Adding linux-raw-sys v0.4.14 (latest: v0.6.4)
#10 1.878       Adding which v4.4.2 (latest: v6.0.2)
#10 1.878       Adding windows-sys v0.52.0 (latest: v0.59.0)
#10 1.879  Downloading crates ...
#10 1.910   Downloaded equivalent v1.0.1
#10 1.913   Downloaded once_cell v1.19.0
#10 1.919   Downloaded log v0.4.22
#10 1.925   Downloaded errno v0.3.9
#10 1.929   Downloaded which v4.4.2
#10 1.933   Downloaded unicode-ident v1.0.12
#10 1.940   Downloaded proc-macro2 v1.0.86
#10 1.946   Downloaded memchr v2.7.4
#10 1.959   Downloaded bitflags v2.6.0
#10 1.968   Downloaded indexmap v2.3.0
#10 1.978   Downloaded hashbrown v0.14.5
#10 1.989   Downloaded regex v1.10.5
#10 2.019   Downloaded syn v2.0.72
#10 2.042   Downloaded aho-corasick v1.1.3
#10 2.055   Downloaded rustix v0.38.34
#10 2.111   Downloaded regex-automata v0.4.7
#10 2.146   Downloaded protobuf-support v3.5.0
#10 2.150   Downloaded protobuf v3.5.0
#10 2.178   Downloaded protobuf-parse v3.5.0
#10 2.187   Downloaded regex-syntax v0.8.4
#10 2.203   Downloaded quote v1.0.36
#10 2.209   Downloaded thiserror-impl v1.0.63
#10 2.212   Downloaded linux-raw-sys v0.4.14
#10 2.301   Downloaded libc v0.2.155
#10 2.364   Downloaded thiserror v1.0.63
#10 2.375   Downloaded tempfile v3.10.1
#10 2.380   Downloaded fastrand v2.1.0
#10 2.383   Downloaded either v1.13.0
#10 2.386   Downloaded home v0.5.9
#10 2.388   Downloaded cfg-if v1.0.0
#10 2.390   Downloaded anyhow v1.0.86
#10 2.508    Compiling proc-macro2 v1.0.86
#10 2.508    Compiling unicode-ident v1.0.12
#10 2.508    Compiling thiserror v1.0.63
#10 2.508    Compiling rustix v0.38.34
#10 2.508    Compiling bitflags v2.6.0
#10 2.508    Compiling linux-raw-sys v0.4.14
#10 2.509    Compiling protobuf v3.5.0
#10 2.511    Compiling anyhow v1.0.86
#10 2.515    Compiling memchr v2.7.4
#10 2.515    Compiling either v1.13.0
#10 2.515    Compiling once_cell v1.19.0
#10 2.515    Compiling home v0.5.9
#10 2.517    Compiling hashbrown v0.14.5
#10 2.520    Compiling fastrand v2.1.0
#10 2.520    Compiling regex-syntax v0.8.4
#10 2.522    Compiling cfg-if v1.0.0
#10 2.523    Compiling equivalent v1.0.1
#10 2.525    Compiling log v0.4.22
#10 3.333    Compiling aho-corasick v1.1.3
#10 3.496    Compiling quote v1.0.36
#10 3.567    Compiling indexmap v2.3.0
#10 3.748    Compiling syn v2.0.72
#10 4.941    Compiling regex-automata v0.4.7
#10 6.022    Compiling which v4.4.2
#10 6.022    Compiling tempfile v3.10.1
#10 6.651    Compiling thiserror-impl v1.0.63
#10 8.001    Compiling protobuf-support v3.5.0
#10 8.669    Compiling regex v1.10.5
#10 12.80    Compiling protobuf-parse v3.5.0
#10 14.26    Compiling protobuf-codegen v3.5.0
#10 23.63     Finished `release` profile [optimized] target(s) in 22.89s
#10 23.65   Installing /usr/local/cargo/bin/protoc-gen-rust
#10 23.65    Installed package `protobuf-codegen v3.5.0` (executable `protoc-gen-rust`)
#10 DONE 25.6s

#11 [7/8] RUN cargo install grpcio-compiler
#11 0.756     Updating crates.io index
#11 1.165  Downloading crates ...
#11 1.307   Downloaded grpcio-compiler v0.13.0
#11 1.465   Installing grpcio-compiler v0.13.0
#11 1.530     Updating crates.io index
#11 1.665      Locking 2 packages to latest compatible versions
#11 1.669       Adding protobuf v2.28.0 (latest: v3.5.0)
#11 1.670  Downloading crates ...
#11 1.701   Downloaded protobuf v2.28.0
#11 1.821    Compiling protobuf v2.28.0
#11 5.265    Compiling grpcio-compiler v0.13.0
#11 13.25     Finished `release` profile [optimized] target(s) in 12.52s
#11 13.26   Installing /usr/local/cargo/bin/grpc_rust_plugin
#11 13.26    Installed package `grpcio-compiler v0.13.0` (executable `grpc_rust_plugin`)
#11 DONE 13.7s

#12 [8/8] RUN cargo build --release
#12 0.947     Updating crates.io index
#12 1.376  Downloading crates ...
#12 1.420   Downloaded atty v0.2.11
#12 1.425   Downloaded num-iter v0.1.37
#12 1.429   Downloaded vec_map v0.8.1
#12 1.431   Downloaded unicode-xid v0.1.0
#12 1.434   Downloaded itoa v0.4.3
#12 1.437   Downloaded thread_local v0.3.6
#12 1.440   Downloaded pkg-config v0.3.14
#12 1.442   Downloaded unicode-width v0.1.5
#12 1.445   Downloaded term v0.5.1
#12 1.453   Downloaded num-integer v0.1.39
#12 1.456   Downloaded untrusted v0.6.2
#12 1.458   Downloaded num-rational v0.2.1
#12 1.461   Downloaded chrono v0.4.6
#12 1.533   Downloaded humantime v1.1.1
#12 1.544   Downloaded linked-hash-map v0.4.2
#12 1.548   Downloaded sha1 v0.6.0
#12 1.554   Downloaded idna v0.1.5
#12 1.565   Downloaded lru-cache v0.1.1
#12 1.568   Downloaded slab v0.4.1
#12 1.571   Downloaded simplelog v0.5.2
#12 1.575   Downloaded termcolor v1.0.4
#12 1.578   Downloaded utf8-ranges v1.0.1
#12 1.582   Downloaded net2 v0.2.33
#12 1.587   Downloaded serde_derive v1.0.79
#12 1.592   Downloaded ws v0.7.8
#12 1.601   Downloaded num-complex v0.2.0
#12 1.605   Downloaded unicode-bidi v0.3.4
#12 1.610   Downloaded serde_json v1.0.31
#12 1.616   Downloaded version_check v0.1.5
#12 1.619   Downloaded url v1.7.1
#12 1.626   Downloaded grpcio v0.3.1
#12 1.635   Downloaded memchr v2.1.0
#12 1.641   Downloaded syn v0.15.6
#12 1.652   Downloaded num-bigint v0.2.0
#12 1.660   Downloaded rand v0.4.3
#12 1.669   Downloaded serde v1.0.79
#12 1.676   Downloaded mio v0.6.16
#12 1.693   Downloaded rusqlite v0.14.0
#12 1.703   Downloaded regex-syntax v0.6.2
#12 1.715   Downloaded unicode-normalization v0.1.7
#12 1.732   Downloaded clap v2.32.0
#12 1.747   Downloaded libc v0.2.43
#12 1.784   Downloaded regex v1.0.5
#12 1.804   Downloaded protobuf v2.0.5
#12 1.817   Downloaded rand v0.5.5
#12 1.831   Downloaded futures v0.1.24
#12 1.855   Downloaded lazy_static v1.1.0
#12 1.860   Downloaded ucd-util v0.1.1
#12 1.864   Downloaded strsim v0.7.0
#12 1.868   Downloaded rand_core v0.2.1
#12 1.873   Downloaded env_logger v0.5.13
#12 1.879   Downloaded libsqlite3-sys v0.9.3
#12 1.948   Downloaded time v0.1.40
#12 1.952   Downloaded textwrap v0.10.0
#12 1.955   Downloaded proc-macro2 v0.4.19
#12 1.960   Downloaded num-traits v0.2.6
#12 1.967   Downloaded mio-extras v2.0.5
#12 1.974   Downloaded log v0.4.5
#12 1.978   Downloaded cmake v0.1.34
#12 1.981   Downloaded cc v1.0.25
#12 1.986   Downloaded byteorder v1.2.6
#12 1.990   Downloaded ryu v0.2.6
#12 1.996   Downloaded quick-error v1.2.2
#12 2.001   Downloaded bytes v0.4.10
#12 2.008   Downloaded num v0.2.0
#12 2.013   Downloaded matches v0.1.8
#12 2.014   Downloaded lazycell v1.2.0
#12 2.017   Downloaded cfg-if v0.1.5
#12 2.021   Downloaded percent-encoding v1.0.1
#12 2.022   Downloaded iovec v0.1.2
#12 2.028   Downloaded colored v1.6.1
#12 2.032   Downloaded aho-corasick v0.6.8
#12 2.036   Downloaded ring v0.13.2
#12 2.223   Downloaded quote v0.6.8
#12 2.225   Downloaded httparse v1.3.2
#12 2.229   Downloaded bitflags v1.0.4
#12 2.231   Downloaded ansi_term v0.11.0
#12 2.235   Downloaded grpcio-sys v0.3.1
#12 3.394    Compiling libc v0.2.43
#12 3.394    Compiling version_check v0.1.5
#12 3.394    Compiling cfg-if v0.1.5
#12 3.395    Compiling num-traits v0.2.6
#12 3.395    Compiling pkg-config v0.3.14
#12 3.395    Compiling cc v1.0.25
#12 3.395    Compiling num-integer v0.1.39
#12 3.397    Compiling rand_core v0.2.1
#12 3.400    Compiling proc-macro2 v0.4.19
#12 3.402    Compiling matches v0.1.8
#12 3.404    Compiling num-bigint v0.2.0
#12 3.404    Compiling unicode-xid v0.1.0
#12 3.405    Compiling byteorder v1.2.6
#12 3.407    Compiling regex v1.0.5
#12 3.407    Compiling num-iter v0.1.37
#12 3.408    Compiling ucd-util v0.1.1
#12 3.412    Compiling lazycell v1.2.0
#12 3.415    Compiling protobuf v2.0.5
#12 3.422    Compiling serde v1.0.79
#12 3.422    Compiling num-complex v0.2.0
#12 3.422    Compiling slab v0.4.1
#12 3.423    Compiling httparse v1.3.2
#12 3.423    Compiling unicode-normalization v0.1.7
#12 3.423    Compiling num-rational v0.2.1
#12 3.456    Compiling log v0.4.5
#12 3.486    Compiling unicode-bidi v0.3.4
#12 3.555    Compiling ryu v0.2.6
#12 3.561    Compiling regex-syntax v0.6.2
#12 3.763    Compiling unicode-width v0.1.5
#12 3.778    Compiling quick-error v1.2.2
#12 3.795    Compiling linked-hash-map v0.4.2
#12 3.883    Compiling lazy_static v1.1.0
#12 3.890    Compiling memchr v2.1.0
#12 3.915    Compiling utf8-ranges v1.0.1
#12 3.936    Compiling bitflags v1.0.4
#12 3.974    Compiling percent-encoding v1.0.1
#12 3.990    Compiling textwrap v0.10.0
#12 4.005    Compiling humantime v1.1.1
#12 4.019    Compiling term v0.5.1
#12 4.033    Compiling termcolor v1.0.4
#12 4.033    Compiling itoa v0.4.3
#12 4.036    Compiling sha1 v0.6.0
#12 4.066    Compiling cmake v0.1.34
#12 4.190    Compiling lru-cache v0.1.1
#12 4.219    Compiling libsqlite3-sys v0.9.3
#12 4.319    Compiling ansi_term v0.11.0
#12 4.353    Compiling iovec v0.1.2
#12 4.360    Compiling rand v0.5.5
#12 4.398    Compiling net2 v0.2.33
#12 4.416    Compiling time v0.1.40
#12 4.438    Compiling thread_local v0.3.6
#12 4.631    Compiling atty v0.2.11
#12 4.767    Compiling bytes v0.4.10
#12 4.798    Compiling rand v0.4.3
#12 4.867    Compiling quote v0.6.8
#12 4.891    Compiling vec_map v0.8.1
#12 4.968    Compiling aho-corasick v0.6.8
#12 5.017    Compiling mio v0.6.16
#12 5.065    Compiling untrusted v0.6.2
#12 5.627    Compiling idna v0.1.5
#12 5.640    Compiling syn v0.15.6
#12 5.685    Compiling strsim v0.7.0
#12 5.726    Compiling futures v0.1.24
#12 5.738    Compiling colored v1.6.1
#12 5.821    Compiling rusqlite v0.14.0
#12 5.891    Compiling clap v2.32.0
#12 6.001    Compiling grpcio-sys v0.3.1
#12 6.111    Compiling ring v0.13.2
#12 6.131    Compiling chrono v0.4.6
#12 6.391    Compiling url v1.7.1
#12 6.532    Compiling mio-extras v2.0.5
#12 7.742    Compiling ws v0.7.8
#12 7.778    Compiling simplelog v0.5.2
#12 9.028    Compiling num v0.2.0
#12 9.170    Compiling env_logger v0.5.13
#12 10.07    Compiling serde_json v1.0.31
#12 10.91    Compiling serde_derive v1.0.79
#12 40.90    Compiling grpcio v0.3.1
#12 41.93    Compiling byzd v0.1.0 (/usr/local/byzan)
#12 42.01 warning: trait objects without an explicit `dyn` are deprecated
#12 42.01   --> src/bin/../proto/byzan.rs:80:26
#12 42.01    |
#12 42.01 80 |     fn as_any(&self) -> &::std::any::Any {
#12 42.01    |                          ^^^^^^^^^^^^^^^
#12 42.01    |
#12 42.01    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.01    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.01    = note: `#[warn(bare_trait_objects)]` on by default
#12 42.01 help: if this is an object-safe trait, use `dyn`
#12 42.01    |
#12 42.01 80 |     fn as_any(&self) -> &dyn (::std::any::Any) {
#12 42.01    |                          +++++               +
#12 42.01 
#12 42.01 warning: trait objects without an explicit `dyn` are deprecated
#12 42.01   --> src/bin/../proto/byzan.rs:83:38
#12 42.01    |
#12 42.01 83 |     fn as_any_mut(&mut self) -> &mut ::std::any::Any {
#12 42.01    |                                      ^^^^^^^^^^^^^^^
#12 42.01    |
#12 42.01    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.01    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.01 help: if this is an object-safe trait, use `dyn`
#12 42.01    |
#12 42.01 83 |     fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
#12 42.01    |                                      +++++               +
#12 42.01 
#12 42.01 warning: trait objects without an explicit `dyn` are deprecated
#12 42.01   --> src/bin/../proto/byzan.rs:86:55
#12 42.01    |
#12 42.01 86 |     fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
#12 42.01    |                                                       ^^^^^^^^^^^^^^^
#12 42.01    |
#12 42.01    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.01    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.01 help: if this is an object-safe trait, use `dyn`
#12 42.01    |
#12 42.01 86 |     fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
#12 42.01    |                                                       +++++               +
#12 42.01 
#12 42.02 warning: trait objects without an explicit `dyn` are deprecated
#12 42.02    --> src/bin/../proto/byzan.rs:309:26
#12 42.02     |
#12 42.02 309 |     fn as_any(&self) -> &::std::any::Any {
#12 42.02     |                          ^^^^^^^^^^^^^^^
#12 42.02     |
#12 42.02     = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.02     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.02 help: if this is an object-safe trait, use `dyn`
#12 42.02     |
#12 42.02 309 |     fn as_any(&self) -> &dyn (::std::any::Any) {
#12 42.02     |                          +++++               +
#12 42.02 
#12 42.02 warning: trait objects without an explicit `dyn` are deprecated
#12 42.02    --> src/bin/../proto/byzan.rs:312:38
#12 42.02     |
#12 42.02 312 |     fn as_any_mut(&mut self) -> &mut ::std::any::Any {
#12 42.02     |                                      ^^^^^^^^^^^^^^^
#12 42.02     |
#12 42.02     = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.02     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.02 help: if this is an object-safe trait, use `dyn`
#12 42.02     |
#12 42.02 312 |     fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
#12 42.02     |                                      +++++               +
#12 42.02 
#12 42.02 warning: trait objects without an explicit `dyn` are deprecated
#12 42.02    --> src/bin/../proto/byzan.rs:315:55
#12 42.02     |
#12 42.02 315 |     fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
#12 42.02     |                                                       ^^^^^^^^^^^^^^^
#12 42.02     |
#12 42.02     = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.02     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.02 help: if this is an object-safe trait, use `dyn`
#12 42.02     |
#12 42.02 315 |     fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
#12 42.02     |                                                       +++++               +
#12 42.02 
#12 42.02 warning: trait objects without an explicit `dyn` are deprecated
#12 42.02    --> src/bin/../proto/byzan.rs:657:26
#12 42.02     |
#12 42.02 657 |     fn as_any(&self) -> &::std::any::Any {
#12 42.02     |                          ^^^^^^^^^^^^^^^
#12 42.02     |
#12 42.02     = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.02     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.02 help: if this is an object-safe trait, use `dyn`
#12 42.02     |
#12 42.02 657 |     fn as_any(&self) -> &dyn (::std::any::Any) {
#12 42.02     |                          +++++               +
#12 42.02 
#12 42.02 warning: trait objects without an explicit `dyn` are deprecated
#12 42.02    --> src/bin/../proto/byzan.rs:660:38
#12 42.02     |
#12 42.02 660 |     fn as_any_mut(&mut self) -> &mut ::std::any::Any {
#12 42.02     |                                      ^^^^^^^^^^^^^^^
#12 42.02     |
#12 42.02     = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.02     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.02 help: if this is an object-safe trait, use `dyn`
#12 42.02     |
#12 42.02 660 |     fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
#12 42.02     |                                      +++++               +
#12 42.02 
#12 42.02 warning: trait objects without an explicit `dyn` are deprecated
#12 42.02    --> src/bin/../proto/byzan.rs:663:55
#12 42.02     |
#12 42.02 663 |     fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
#12 42.02     |                                                       ^^^^^^^^^^^^^^^
#12 42.02     |
#12 42.02     = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.02     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.02 help: if this is an object-safe trait, use `dyn`
#12 42.02     |
#12 42.02 663 |     fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
#12 42.02     |                                                       +++++               +
#12 42.02 
#12 42.02 warning: trait objects without an explicit `dyn` are deprecated
#12 42.02    --> src/bin/../proto/byzan.rs:850:26
#12 42.02     |
#12 42.02 850 |     fn as_any(&self) -> &::std::any::Any {
#12 42.02     |                          ^^^^^^^^^^^^^^^
#12 42.02     |
#12 42.02     = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.02     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.02 help: if this is an object-safe trait, use `dyn`
#12 42.02     |
#12 42.02 850 |     fn as_any(&self) -> &dyn (::std::any::Any) {
#12 42.02     |                          +++++               +
#12 42.02 
#12 42.02 warning: trait objects without an explicit `dyn` are deprecated
#12 42.02    --> src/bin/../proto/byzan.rs:853:38
#12 42.02     |
#12 42.02 853 |     fn as_any_mut(&mut self) -> &mut ::std::any::Any {
#12 42.02     |                                      ^^^^^^^^^^^^^^^
#12 42.02     |
#12 42.02     = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.02     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.02 help: if this is an object-safe trait, use `dyn`
#12 42.02     |
#12 42.02 853 |     fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
#12 42.02     |                                      +++++               +
#12 42.02 
#12 42.02 warning: trait objects without an explicit `dyn` are deprecated
#12 42.02    --> src/bin/../proto/byzan.rs:856:55
#12 42.02     |
#12 42.02 856 |     fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
#12 42.02     |                                                       ^^^^^^^^^^^^^^^
#12 42.02     |
#12 42.02     = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.02     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.02 help: if this is an object-safe trait, use `dyn`
#12 42.02     |
#12 42.02 856 |     fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
#12 42.02     |                                                       +++++               +
#12 42.02 
#12 42.02 warning: trait objects without an explicit `dyn` are deprecated
#12 42.02     --> src/bin/../proto/byzan.rs:1006:26
#12 42.02      |
#12 42.02 1006 |     fn as_any(&self) -> &::std::any::Any {
#12 42.02      |                          ^^^^^^^^^^^^^^^
#12 42.02      |
#12 42.02      = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.02      = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.02 help: if this is an object-safe trait, use `dyn`
#12 42.02      |
#12 42.02 1006 |     fn as_any(&self) -> &dyn (::std::any::Any) {
#12 42.02      |                          +++++               +
#12 42.02 
#12 42.02 warning: trait objects without an explicit `dyn` are deprecated
#12 42.02     --> src/bin/../proto/byzan.rs:1009:38
#12 42.02      |
#12 42.02 1009 |     fn as_any_mut(&mut self) -> &mut ::std::any::Any {
#12 42.02      |                                      ^^^^^^^^^^^^^^^
#12 42.02      |
#12 42.02      = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.02      = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.02 help: if this is an object-safe trait, use `dyn`
#12 42.02      |
#12 42.02 1009 |     fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
#12 42.02      |                                      +++++               +
#12 42.02 
#12 42.02 warning: trait objects without an explicit `dyn` are deprecated
#12 42.02     --> src/bin/../proto/byzan.rs:1012:55
#12 42.02      |
#12 42.02 1012 |     fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
#12 42.02      |                                                       ^^^^^^^^^^^^^^^
#12 42.02      |
#12 42.02      = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.02      = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.02 help: if this is an object-safe trait, use `dyn`
#12 42.02      |
#12 42.02 1012 |     fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
#12 42.02      |                                                       +++++               +
#12 42.02 
#12 42.03 warning: trait objects without an explicit `dyn` are deprecated
#12 42.03     --> src/bin/../proto/byzan.rs:1169:26
#12 42.03      |
#12 42.03 1169 |     fn as_any(&self) -> &::std::any::Any {
#12 42.03      |                          ^^^^^^^^^^^^^^^
#12 42.03      |
#12 42.03      = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.03      = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.03 help: if this is an object-safe trait, use `dyn`
#12 42.03      |
#12 42.03 1169 |     fn as_any(&self) -> &dyn (::std::any::Any) {
#12 42.03      |                          +++++               +
#12 42.03 
#12 42.03 warning: trait objects without an explicit `dyn` are deprecated
#12 42.03     --> src/bin/../proto/byzan.rs:1172:38
#12 42.03      |
#12 42.03 1172 |     fn as_any_mut(&mut self) -> &mut ::std::any::Any {
#12 42.03      |                                      ^^^^^^^^^^^^^^^
#12 42.03      |
#12 42.03      = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.03      = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.03 help: if this is an object-safe trait, use `dyn`
#12 42.03      |
#12 42.03 1172 |     fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
#12 42.03      |                                      +++++               +
#12 42.03 
#12 42.03 warning: trait objects without an explicit `dyn` are deprecated
#12 42.03     --> src/bin/../proto/byzan.rs:1175:55
#12 42.03      |
#12 42.03 1175 |     fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
#12 42.03      |                                                       ^^^^^^^^^^^^^^^
#12 42.03      |
#12 42.03      = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.03      = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.03 help: if this is an object-safe trait, use `dyn`
#12 42.03      |
#12 42.03 1175 |     fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
#12 42.03      |                                                       +++++               +
#12 42.03 
#12 42.03 warning: trait objects without an explicit `dyn` are deprecated
#12 42.03     --> src/bin/../proto/byzan.rs:1354:26
#12 42.03      |
#12 42.03 1354 |     fn as_any(&self) -> &::std::any::Any {
#12 42.03      |                          ^^^^^^^^^^^^^^^
#12 42.03      |
#12 42.03      = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.03      = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.03 help: if this is an object-safe trait, use `dyn`
#12 42.03      |
#12 42.03 1354 |     fn as_any(&self) -> &dyn (::std::any::Any) {
#12 42.03      |                          +++++               +
#12 42.03 
#12 42.03 warning: trait objects without an explicit `dyn` are deprecated
#12 42.03     --> src/bin/../proto/byzan.rs:1357:38
#12 42.03      |
#12 42.03 1357 |     fn as_any_mut(&mut self) -> &mut ::std::any::Any {
#12 42.03      |                                      ^^^^^^^^^^^^^^^
#12 42.03      |
#12 42.03      = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.03      = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.03 help: if this is an object-safe trait, use `dyn`
#12 42.03      |
#12 42.03 1357 |     fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
#12 42.03      |                                      +++++               +
#12 42.03 
#12 42.03 warning: trait objects without an explicit `dyn` are deprecated
#12 42.03     --> src/bin/../proto/byzan.rs:1360:55
#12 42.03      |
#12 42.03 1360 |     fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
#12 42.03      |                                                       ^^^^^^^^^^^^^^^
#12 42.03      |
#12 42.03      = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.03      = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.03 help: if this is an object-safe trait, use `dyn`
#12 42.03      |
#12 42.03 1360 |     fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
#12 42.03      |                                                       +++++               +
#12 42.03 
#12 42.03 warning: trait objects without an explicit `dyn` are deprecated
#12 42.03     --> src/bin/../proto/byzan.rs:1516:26
#12 42.03      |
#12 42.03 1516 |     fn as_any(&self) -> &::std::any::Any {
#12 42.03      |                          ^^^^^^^^^^^^^^^
#12 42.03      |
#12 42.03      = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.03      = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.03 help: if this is an object-safe trait, use `dyn`
#12 42.03      |
#12 42.03 1516 |     fn as_any(&self) -> &dyn (::std::any::Any) {
#12 42.03      |                          +++++               +
#12 42.03 
#12 42.03 warning: trait objects without an explicit `dyn` are deprecated
#12 42.03     --> src/bin/../proto/byzan.rs:1519:38
#12 42.03      |
#12 42.03 1519 |     fn as_any_mut(&mut self) -> &mut ::std::any::Any {
#12 42.03      |                                      ^^^^^^^^^^^^^^^
#12 42.03      |
#12 42.03      = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.03      = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.03 help: if this is an object-safe trait, use `dyn`
#12 42.03      |
#12 42.03 1519 |     fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
#12 42.03      |                                      +++++               +
#12 42.03 
#12 42.03 warning: trait objects without an explicit `dyn` are deprecated
#12 42.03     --> src/bin/../proto/byzan.rs:1522:55
#12 42.03      |
#12 42.03 1522 |     fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
#12 42.03      |                                                       ^^^^^^^^^^^^^^^
#12 42.03      |
#12 42.03      = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.03      = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.03 help: if this is an object-safe trait, use `dyn`
#12 42.03      |
#12 42.03 1522 |     fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
#12 42.03      |                                                       +++++               +
#12 42.03 
#12 42.03 warning: trait objects without an explicit `dyn` are deprecated
#12 42.03     --> src/bin/../proto/byzan.rs:1730:26
#12 42.03      |
#12 42.03 1730 |     fn as_any(&self) -> &::std::any::Any {
#12 42.03      |                          ^^^^^^^^^^^^^^^
#12 42.03      |
#12 42.03      = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.03      = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.03 help: if this is an object-safe trait, use `dyn`
#12 42.03      |
#12 42.03 1730 |     fn as_any(&self) -> &dyn (::std::any::Any) {
#12 42.03      |                          +++++               +
#12 42.03 
#12 42.03 warning: trait objects without an explicit `dyn` are deprecated
#12 42.03     --> src/bin/../proto/byzan.rs:1733:38
#12 42.03      |
#12 42.03 1733 |     fn as_any_mut(&mut self) -> &mut ::std::any::Any {
#12 42.03      |                                      ^^^^^^^^^^^^^^^
#12 42.03      |
#12 42.03      = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.03      = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.03 help: if this is an object-safe trait, use `dyn`
#12 42.03      |
#12 42.03 1733 |     fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
#12 42.03      |                                      +++++               +
#12 42.03 
#12 42.03 warning: trait objects without an explicit `dyn` are deprecated
#12 42.03     --> src/bin/../proto/byzan.rs:1736:55
#12 42.03      |
#12 42.03 1736 |     fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
#12 42.03      |                                                       ^^^^^^^^^^^^^^^
#12 42.03      |
#12 42.03      = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.03      = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.03 help: if this is an object-safe trait, use `dyn`
#12 42.03      |
#12 42.03 1736 |     fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
#12 42.03      |                                                       +++++               +
#12 42.03 
#12 42.03 warning: trait objects without an explicit `dyn` are deprecated
#12 42.03     --> src/bin/../proto/byzan.rs:1942:26
#12 42.03      |
#12 42.03 1942 |     fn as_any(&self) -> &::std::any::Any {
#12 42.03      |                          ^^^^^^^^^^^^^^^
#12 42.03      |
#12 42.03      = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.03      = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.03 help: if this is an object-safe trait, use `dyn`
#12 42.03      |
#12 42.03 1942 |     fn as_any(&self) -> &dyn (::std::any::Any) {
#12 42.03      |                          +++++               +
#12 42.03 
#12 42.04 warning: trait objects without an explicit `dyn` are deprecated
#12 42.04     --> src/bin/../proto/byzan.rs:1945:38
#12 42.04      |
#12 42.04 1945 |     fn as_any_mut(&mut self) -> &mut ::std::any::Any {
#12 42.04      |                                      ^^^^^^^^^^^^^^^
#12 42.04      |
#12 42.04      = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.04      = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.04 help: if this is an object-safe trait, use `dyn`
#12 42.04      |
#12 42.04 1945 |     fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
#12 42.04      |                                      +++++               +
#12 42.04 
#12 42.04 warning: trait objects without an explicit `dyn` are deprecated
#12 42.04     --> src/bin/../proto/byzan.rs:1948:55
#12 42.04      |
#12 42.04 1948 |     fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
#12 42.04      |                                                       ^^^^^^^^^^^^^^^
#12 42.04      |
#12 42.04      = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.04      = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.04 help: if this is an object-safe trait, use `dyn`
#12 42.04      |
#12 42.04 1948 |     fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
#12 42.04      |                                                       +++++               +
#12 42.04 
#12 42.04 warning: trait objects without an explicit `dyn` are deprecated
#12 42.04     --> src/bin/../proto/byzan.rs:2140:26
#12 42.04      |
#12 42.04 2140 |     fn as_any(&self) -> &::std::any::Any {
#12 42.04      |                          ^^^^^^^^^^^^^^^
#12 42.04      |
#12 42.04      = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.04      = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.04 help: if this is an object-safe trait, use `dyn`
#12 42.04      |
#12 42.04 2140 |     fn as_any(&self) -> &dyn (::std::any::Any) {
#12 42.04      |                          +++++               +
#12 42.04 
#12 42.04 warning: trait objects without an explicit `dyn` are deprecated
#12 42.04     --> src/bin/../proto/byzan.rs:2143:38
#12 42.04      |
#12 42.04 2143 |     fn as_any_mut(&mut self) -> &mut ::std::any::Any {
#12 42.04      |                                      ^^^^^^^^^^^^^^^
#12 42.04      |
#12 42.04      = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.04      = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.04 help: if this is an object-safe trait, use `dyn`
#12 42.04      |
#12 42.04 2143 |     fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
#12 42.04      |                                      +++++               +
#12 42.04 
#12 42.04 warning: trait objects without an explicit `dyn` are deprecated
#12 42.04     --> src/bin/../proto/byzan.rs:2146:55
#12 42.04      |
#12 42.04 2146 |     fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
#12 42.04      |                                                       ^^^^^^^^^^^^^^^
#12 42.04      |
#12 42.04      = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.04      = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.04 help: if this is an object-safe trait, use `dyn`
#12 42.04      |
#12 42.04 2146 |     fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
#12 42.04      |                                                       +++++               +
#12 42.04 
#12 42.06 warning: use of deprecated macro `try`: use the `?` operator instead
#12 42.06    --> src/bin/../bc/block.rs:103:17
#12 42.06     |
#12 42.06 103 |                 try!(self.valid_prev_hash(&prev_block));
#12 42.06     |                 ^^^
#12 42.06     |
#12 42.06     = note: `#[warn(deprecated)]` on by default
#12 42.06 
#12 42.06 warning: use of deprecated macro `try`: use the `?` operator instead
#12 42.06    --> src/bin/../bc/block.rs:104:17
#12 42.06     |
#12 42.06 104 |                 try!(self.valid_id(blockchain));
#12 42.06     |                 ^^^
#12 42.06 
#12 42.06 warning: use of deprecated macro `try`: use the `?` operator instead
#12 42.06    --> src/bin/../bc/block.rs:105:17
#12 42.06     |
#12 42.06 105 |                 try!(self.valid_hash());
#12 42.06     |                 ^^^
#12 42.06 
#12 42.06 warning: use of deprecated macro `try`: use the `?` operator instead
#12 42.06   --> src/bin/../bc/db.rs:69:9
#12 42.06    |
#12 42.06 69 |         try!(b.valid(self));
#12 42.06    |         ^^^
#12 42.06 
#12 42.06 warning: use of deprecated macro `try`: use the `?` operator instead
#12 42.06   --> src/bin/../bc/mem.rs:22:9
#12 42.06    |
#12 42.06 22 |         try!(b.valid(self));
#12 42.06    |         ^^^
#12 42.06 
#12 42.06 warning: use of deprecated macro `try`: use the `?` operator instead
#12 42.06    --> src/bc/block.rs:103:17
#12 42.06     |
#12 42.06 103 |                 try!(self.valid_prev_hash(&prev_block));
#12 42.06     |                 ^^^
#12 42.06     |
#12 42.06     = note: `#[warn(deprecated)]` on by default
#12 42.06 
#12 42.06 warning: use of deprecated macro `try`: use the `?` operator instead
#12 42.06    --> src/bc/block.rs:104:17
#12 42.06     |
#12 42.06 104 |                 try!(self.valid_id(blockchain));
#12 42.06     |                 ^^^
#12 42.06 
#12 42.06 warning: use of deprecated macro `try`: use the `?` operator instead
#12 42.06    --> src/bc/block.rs:105:17
#12 42.06     |
#12 42.06 105 |                 try!(self.valid_hash());
#12 42.06     |                 ^^^
#12 42.06 
#12 42.06 warning: use of deprecated macro `try`: use the `?` operator instead
#12 42.06   --> src/bc/db.rs:69:9
#12 42.06    |
#12 42.06 69 |         try!(b.valid(self));
#12 42.06    |         ^^^
#12 42.06 
#12 42.06 warning: use of deprecated macro `try`: use the `?` operator instead
#12 42.06   --> src/bc/mem.rs:22:9
#12 42.06    |
#12 42.06 22 |         try!(b.valid(self));
#12 42.06    |         ^^^
#12 42.06 
#12 42.07 warning: use of deprecated macro `try`: use the `?` operator instead
#12 42.07   --> src/p2p/api.rs:32:45
#12 42.07    |
#12 42.07 32 |     let (blockchain_hash, blockchain_len) = try!(local_bc_last());
#12 42.07    |                                             ^^^
#12 42.07 
#12 42.07 warning: use of deprecated macro `try`: use the `?` operator instead
#12 42.07   --> src/p2p/api.rs:38:21
#12 42.07    |
#12 42.07 38 |             let b = try!(local_b_by_idx(idx));
#12 42.07    |                     ^^^
#12 42.07 
#12 42.07 warning: use of deprecated macro `try`: use the `?` operator instead
#12 42.07   --> src/p2p/api.rs:39:21
#12 42.07    |
#12 42.07 39 |             let r = try!(remote_b_by_idx(req, idx));
#12 42.07    |                     ^^^
#12 42.07 
#12 42.07 warning: use of deprecated macro `try`: use the `?` operator instead
#12 42.07   --> src/p2p/api.rs:42:26
#12 42.07    |
#12 42.07 42 |                 let tb = try!(till(&req.context, idx + 1));
#12 42.07    |                          ^^^
#12 42.07 
#12 42.07 warning: trait objects without an explicit `dyn` are deprecated
#12 42.07   --> src/bin/../proto/byzan.rs:81:18
#12 42.07    |
#12 42.07 81 |         self as &::std::any::Any
#12 42.07    |                  ^^^^^^^^^^^^^^^
#12 42.07    |
#12 42.07    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.07    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.07 help: if this is an object-safe trait, use `dyn`
#12 42.07    |
#12 42.07 81 |         self as &dyn (::std::any::Any)
#12 42.07    |                  +++++               +
#12 42.07 
#12 42.07 warning: trait objects without an explicit `dyn` are deprecated
#12 42.07   --> src/bin/../proto/byzan.rs:84:22
#12 42.07    |
#12 42.07 84 |         self as &mut ::std::any::Any
#12 42.07    |                      ^^^^^^^^^^^^^^^
#12 42.07    |
#12 42.07    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.07    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.07 help: if this is an object-safe trait, use `dyn`
#12 42.07    |
#12 42.07 84 |         self as &mut dyn (::std::any::Any)
#12 42.07    |                      +++++               +
#12 42.07 
#12 42.08 warning: trait objects without an explicit `dyn` are deprecated
#12 42.08    --> src/bin/../proto/byzan.rs:310:18
#12 42.08     |
#12 42.08 310 |         self as &::std::any::Any
#12 42.08     |                  ^^^^^^^^^^^^^^^
#12 42.08     |
#12 42.08     = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.08     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.08 help: if this is an object-safe trait, use `dyn`
#12 42.08     |
#12 42.08 310 |         self as &dyn (::std::any::Any)
#12 42.08     |                  +++++               +
#12 42.08 
#12 42.08 warning: trait objects without an explicit `dyn` are deprecated
#12 42.08    --> src/bin/../proto/byzan.rs:313:22
#12 42.08     |
#12 42.08 313 |         self as &mut ::std::any::Any
#12 42.08     |                      ^^^^^^^^^^^^^^^
#12 42.08     |
#12 42.08     = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.08     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.08 help: if this is an object-safe trait, use `dyn`
#12 42.08     |
#12 42.08 313 |         self as &mut dyn (::std::any::Any)
#12 42.08     |                      +++++               +
#12 42.08 
#12 42.09 warning: trait objects without an explicit `dyn` are deprecated
#12 42.09    --> src/bin/../proto/byzan.rs:658:18
#12 42.09     |
#12 42.09 658 |         self as &::std::any::Any
#12 42.09     |                  ^^^^^^^^^^^^^^^
#12 42.09     |
#12 42.09     = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.09     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.09 help: if this is an object-safe trait, use `dyn`
#12 42.09     |
#12 42.09 658 |         self as &dyn (::std::any::Any)
#12 42.09     |                  +++++               +
#12 42.09 
#12 42.09 warning: trait objects without an explicit `dyn` are deprecated
#12 42.09    --> src/bin/../proto/byzan.rs:661:22
#12 42.09     |
#12 42.09 661 |         self as &mut ::std::any::Any
#12 42.09     |                      ^^^^^^^^^^^^^^^
#12 42.09     |
#12 42.09     = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.09     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.09 help: if this is an object-safe trait, use `dyn`
#12 42.09     |
#12 42.09 661 |         self as &mut dyn (::std::any::Any)
#12 42.09     |                      +++++               +
#12 42.09 
#12 42.09 warning: trait objects without an explicit `dyn` are deprecated
#12 42.09    --> src/bin/../proto/byzan.rs:851:18
#12 42.09     |
#12 42.09 851 |         self as &::std::any::Any
#12 42.09     |                  ^^^^^^^^^^^^^^^
#12 42.09     |
#12 42.09     = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.09     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.09 help: if this is an object-safe trait, use `dyn`
#12 42.09     |
#12 42.09 851 |         self as &dyn (::std::any::Any)
#12 42.09     |                  +++++               +
#12 42.09 
#12 42.09 warning: trait objects without an explicit `dyn` are deprecated
#12 42.09    --> src/bin/../proto/byzan.rs:854:22
#12 42.09     |
#12 42.09 854 |         self as &mut ::std::any::Any
#12 42.09     |                      ^^^^^^^^^^^^^^^
#12 42.09     |
#12 42.09     = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.09     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.09 help: if this is an object-safe trait, use `dyn`
#12 42.09     |
#12 42.09 854 |         self as &mut dyn (::std::any::Any)
#12 42.09     |                      +++++               +
#12 42.09 
#12 42.10 warning: trait objects without an explicit `dyn` are deprecated
#12 42.10     --> src/bin/../proto/byzan.rs:1007:18
#12 42.10      |
#12 42.10 1007 |         self as &::std::any::Any
#12 42.10      |                  ^^^^^^^^^^^^^^^
#12 42.10      |
#12 42.10      = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.10      = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.10 help: if this is an object-safe trait, use `dyn`
#12 42.10      |
#12 42.10 1007 |         self as &dyn (::std::any::Any)
#12 42.10      |                  +++++               +
#12 42.10 
#12 42.10 warning: trait objects without an explicit `dyn` are deprecated
#12 42.10     --> src/bin/../proto/byzan.rs:1010:22
#12 42.10      |
#12 42.10 1010 |         self as &mut ::std::any::Any
#12 42.10      |                      ^^^^^^^^^^^^^^^
#12 42.10      |
#12 42.10      = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.10      = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.10 help: if this is an object-safe trait, use `dyn`
#12 42.10      |
#12 42.10 1010 |         self as &mut dyn (::std::any::Any)
#12 42.10      |                      +++++               +
#12 42.10 
#12 42.10 warning: trait objects without an explicit `dyn` are deprecated
#12 42.10     --> src/bin/../proto/byzan.rs:1170:18
#12 42.10      |
#12 42.10 1170 |         self as &::std::any::Any
#12 42.10      |                  ^^^^^^^^^^^^^^^
#12 42.10      |
#12 42.10      = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.10      = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.10 help: if this is an object-safe trait, use `dyn`
#12 42.10      |
#12 42.10 1170 |         self as &dyn (::std::any::Any)
#12 42.10      |                  +++++               +
#12 42.10 
#12 42.10 warning: trait objects without an explicit `dyn` are deprecated
#12 42.10     --> src/bin/../proto/byzan.rs:1173:22
#12 42.10      |
#12 42.10 1173 |         self as &mut ::std::any::Any
#12 42.10      |                      ^^^^^^^^^^^^^^^
#12 42.10      |
#12 42.10      = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.10      = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.10 help: if this is an object-safe trait, use `dyn`
#12 42.10      |
#12 42.10 1173 |         self as &mut dyn (::std::any::Any)
#12 42.10      |                      +++++               +
#12 42.10 
#12 42.11 warning: trait objects without an explicit `dyn` are deprecated
#12 42.11     --> src/bin/../proto/byzan.rs:1355:18
#12 42.11      |
#12 42.11 1355 |         self as &::std::any::Any
#12 42.11      |                  ^^^^^^^^^^^^^^^
#12 42.11      |
#12 42.11      = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.11      = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.11 help: if this is an object-safe trait, use `dyn`
#12 42.11      |
#12 42.11 1355 |         self as &dyn (::std::any::Any)
#12 42.11      |                  +++++               +
#12 42.11 
#12 42.11 warning: trait objects without an explicit `dyn` are deprecated
#12 42.11     --> src/bin/../proto/byzan.rs:1358:22
#12 42.11      |
#12 42.11 1358 |         self as &mut ::std::any::Any
#12 42.11      |                      ^^^^^^^^^^^^^^^
#12 42.11      |
#12 42.11      = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.11      = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.11 help: if this is an object-safe trait, use `dyn`
#12 42.11      |
#12 42.11 1358 |         self as &mut dyn (::std::any::Any)
#12 42.11      |                      +++++               +
#12 42.11 
#12 42.11 warning: trait objects without an explicit `dyn` are deprecated
#12 42.11     --> src/bin/../proto/byzan.rs:1517:18
#12 42.11      |
#12 42.11 1517 |         self as &::std::any::Any
#12 42.11      |                  ^^^^^^^^^^^^^^^
#12 42.11      |
#12 42.11      = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.11      = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.11 help: if this is an object-safe trait, use `dyn`
#12 42.11      |
#12 42.11 1517 |         self as &dyn (::std::any::Any)
#12 42.11      |                  +++++               +
#12 42.11 
#12 42.11 warning: trait objects without an explicit `dyn` are deprecated
#12 42.11     --> src/bin/../proto/byzan.rs:1520:22
#12 42.11      |
#12 42.11 1520 |         self as &mut ::std::any::Any
#12 42.11      |                      ^^^^^^^^^^^^^^^
#12 42.11      |
#12 42.11      = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.11      = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.11 help: if this is an object-safe trait, use `dyn`
#12 42.11      |
#12 42.11 1520 |         self as &mut dyn (::std::any::Any)
#12 42.11      |                      +++++               +
#12 42.11 
#12 42.12 warning: trait objects without an explicit `dyn` are deprecated
#12 42.12     --> src/bin/../proto/byzan.rs:1731:18
#12 42.12      |
#12 42.12 1731 |         self as &::std::any::Any
#12 42.12      |                  ^^^^^^^^^^^^^^^
#12 42.12      |
#12 42.12      = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.12      = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.12 help: if this is an object-safe trait, use `dyn`
#12 42.12      |
#12 42.12 1731 |         self as &dyn (::std::any::Any)
#12 42.12      |                  +++++               +
#12 42.12 
#12 42.12 warning: trait objects without an explicit `dyn` are deprecated
#12 42.12     --> src/bin/../proto/byzan.rs:1734:22
#12 42.12      |
#12 42.12 1734 |         self as &mut ::std::any::Any
#12 42.12      |                      ^^^^^^^^^^^^^^^
#12 42.12      |
#12 42.12      = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.12      = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.12 help: if this is an object-safe trait, use `dyn`
#12 42.12      |
#12 42.12 1734 |         self as &mut dyn (::std::any::Any)
#12 42.12      |                      +++++               +
#12 42.12 
#12 42.13 warning: trait objects without an explicit `dyn` are deprecated
#12 42.13     --> src/bin/../proto/byzan.rs:1943:18
#12 42.13      |
#12 42.13 1943 |         self as &::std::any::Any
#12 42.13      |                  ^^^^^^^^^^^^^^^
#12 42.13      |
#12 42.13      = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.13      = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.13 help: if this is an object-safe trait, use `dyn`
#12 42.13      |
#12 42.13 1943 |         self as &dyn (::std::any::Any)
#12 42.13      |                  +++++               +
#12 42.13 
#12 42.13 warning: trait objects without an explicit `dyn` are deprecated
#12 42.13     --> src/bin/../proto/byzan.rs:1946:22
#12 42.13      |
#12 42.13 1946 |         self as &mut ::std::any::Any
#12 42.13      |                      ^^^^^^^^^^^^^^^
#12 42.13      |
#12 42.13      = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.13      = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.13 help: if this is an object-safe trait, use `dyn`
#12 42.13      |
#12 42.13 1946 |         self as &mut dyn (::std::any::Any)
#12 42.13      |                      +++++               +
#12 42.13 
#12 42.13 warning: trait objects without an explicit `dyn` are deprecated
#12 42.13   --> src/proto/byzan.rs:80:26
#12 42.13    |
#12 42.13 80 |     fn as_any(&self) -> &::std::any::Any {
#12 42.13    |                          ^^^^^^^^^^^^^^^
#12 42.13    |
#12 42.13    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.13    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.13    = note: `#[warn(bare_trait_objects)]` on by default
#12 42.13 help: if this is an object-safe trait, use `dyn`
#12 42.13    |
#12 42.13 80 |     fn as_any(&self) -> &dyn (::std::any::Any) {
#12 42.13    |                          +++++               +
#12 42.13 
#12 42.13 warning: trait objects without an explicit `dyn` are deprecated
#12 42.13   --> src/proto/byzan.rs:83:38
#12 42.13    |
#12 42.13 83 |     fn as_any_mut(&mut self) -> &mut ::std::any::Any {
#12 42.13    |                                      ^^^^^^^^^^^^^^^
#12 42.13    |
#12 42.13    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.13    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.13 help: if this is an object-safe trait, use `dyn`
#12 42.13    |
#12 42.13 83 |     fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
#12 42.13    |                                      +++++               +
#12 42.13 
#12 42.13 warning: trait objects without an explicit `dyn` are deprecated
#12 42.13   --> src/proto/byzan.rs:86:55
#12 42.13    |
#12 42.13 86 |     fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
#12 42.13    |                                                       ^^^^^^^^^^^^^^^
#12 42.13    |
#12 42.13    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.13    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.13 help: if this is an object-safe trait, use `dyn`
#12 42.13    |
#12 42.13 86 |     fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
#12 42.13    |                                                       +++++               +
#12 42.13 
#12 42.13 warning: trait objects without an explicit `dyn` are deprecated
#12 42.13    --> src/proto/byzan.rs:309:26
#12 42.13     |
#12 42.13 309 |     fn as_any(&self) -> &::std::any::Any {
#12 42.13     |                          ^^^^^^^^^^^^^^^
#12 42.13     |
#12 42.13     = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.13     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.13 help: if this is an object-safe trait, use `dyn`
#12 42.13     |
#12 42.13 309 |     fn as_any(&self) -> &dyn (::std::any::Any) {
#12 42.13     |                          +++++               +
#12 42.13 
#12 42.13 warning: trait objects without an explicit `dyn` are deprecated
#12 42.13    --> src/proto/byzan.rs:312:38
#12 42.13     |
#12 42.13 312 |     fn as_any_mut(&mut self) -> &mut ::std::any::Any {
#12 42.13     |                                      ^^^^^^^^^^^^^^^
#12 42.13     |
#12 42.13     = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.13     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.13 help: if this is an object-safe trait, use `dyn`
#12 42.13     |
#12 42.13 312 |     fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
#12 42.13     |                                      +++++               +
#12 42.13 
#12 42.13 warning: trait objects without an explicit `dyn` are deprecated
#12 42.13    --> src/proto/byzan.rs:315:55
#12 42.13     |
#12 42.13 315 |     fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
#12 42.13     |                                                       ^^^^^^^^^^^^^^^
#12 42.13     |
#12 42.13     = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.13     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.13 help: if this is an object-safe trait, use `dyn`
#12 42.13     |
#12 42.13 315 |     fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
#12 42.13     |                                                       +++++               +
#12 42.13 
#12 42.14 warning: trait objects without an explicit `dyn` are deprecated
#12 42.14    --> src/proto/byzan.rs:657:26
#12 42.14     |
#12 42.14 657 |     fn as_any(&self) -> &::std::any::Any {
#12 42.14     |                          ^^^^^^^^^^^^^^^
#12 42.14     |
#12 42.14     = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.14     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.14 help: if this is an object-safe trait, use `dyn`
#12 42.14     |
#12 42.14 657 |     fn as_any(&self) -> &dyn (::std::any::Any) {
#12 42.14     |                          +++++               +
#12 42.14 
#12 42.14 warning: trait objects without an explicit `dyn` are deprecated
#12 42.14    --> src/proto/byzan.rs:660:38
#12 42.14     |
#12 42.14 660 |     fn as_any_mut(&mut self) -> &mut ::std::any::Any {
#12 42.14     |                                      ^^^^^^^^^^^^^^^
#12 42.14     |
#12 42.14     = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.14     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.14 help: if this is an object-safe trait, use `dyn`
#12 42.14     |
#12 42.14 660 |     fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
#12 42.14     |                                      +++++               +
#12 42.14 
#12 42.14 warning: trait objects without an explicit `dyn` are deprecated
#12 42.14     --> src/bin/../proto/byzan.rs:2141:18
#12 42.14      |
#12 42.14 2141 |         self as &::std::any::Any
#12 42.14      |                  ^^^^^^^^^^^^^^^
#12 42.14      |
#12 42.14      = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.14      = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.14 help: if this is an object-safe trait, use `dyn`
#12 42.14      |
#12 42.14 2141 |         self as &dyn (::std::any::Any)
#12 42.14      |                  +++++               +
#12 42.14 
#12 42.14 warning: trait objects without an explicit `dyn` are deprecated
#12 42.14    --> src/proto/byzan.rs:663:55
#12 42.14     |
#12 42.14 663 |     fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
#12 42.14     |                                                       ^^^^^^^^^^^^^^^
#12 42.14     |
#12 42.14     = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.14     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.14 help: if this is an object-safe trait, use `dyn`
#12 42.14     |
#12 42.14 663 |     fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
#12 42.14     |                                                       +++++               +
#12 42.14 
#12 42.14 warning: trait objects without an explicit `dyn` are deprecated
#12 42.14     --> src/bin/../proto/byzan.rs:2144:22
#12 42.14      |
#12 42.14 2144 |         self as &mut ::std::any::Any
#12 42.14      |                      ^^^^^^^^^^^^^^^
#12 42.14      |
#12 42.14      = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.14      = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.14 help: if this is an object-safe trait, use `dyn`
#12 42.14      |
#12 42.14 2144 |         self as &mut dyn (::std::any::Any)
#12 42.14      |                      +++++               +
#12 42.14 
#12 42.14 warning: trait objects without an explicit `dyn` are deprecated
#12 42.14    --> src/proto/byzan.rs:850:26
#12 42.14     |
#12 42.14 850 |     fn as_any(&self) -> &::std::any::Any {
#12 42.14     |                          ^^^^^^^^^^^^^^^
#12 42.14     |
#12 42.14     = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.14     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.14 help: if this is an object-safe trait, use `dyn`
#12 42.14     |
#12 42.14 850 |     fn as_any(&self) -> &dyn (::std::any::Any) {
#12 42.14     |                          +++++               +
#12 42.14 
#12 42.14 warning: trait objects without an explicit `dyn` are deprecated
#12 42.14    --> src/proto/byzan.rs:853:38
#12 42.14     |
#12 42.14 853 |     fn as_any_mut(&mut self) -> &mut ::std::any::Any {
#12 42.14     |                                      ^^^^^^^^^^^^^^^
#12 42.14     |
#12 42.14     = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.14     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.14 help: if this is an object-safe trait, use `dyn`
#12 42.14     |
#12 42.14 853 |     fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
#12 42.14     |                                      +++++               +
#12 42.14 
#12 42.14 warning: trait objects without an explicit `dyn` are deprecated
#12 42.14    --> src/proto/byzan.rs:856:55
#12 42.14     |
#12 42.14 856 |     fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
#12 42.14     |                                                       ^^^^^^^^^^^^^^^
#12 42.14     |
#12 42.14     = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.14     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.14 help: if this is an object-safe trait, use `dyn`
#12 42.14     |
#12 42.14 856 |     fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
#12 42.14     |                                                       +++++               +
#12 42.14 
#12 42.14 warning: trait objects without an explicit `dyn` are deprecated
#12 42.14     --> src/proto/byzan.rs:1006:26
#12 42.14      |
#12 42.14 1006 |     fn as_any(&self) -> &::std::any::Any {
#12 42.14      |                          ^^^^^^^^^^^^^^^
#12 42.14      |
#12 42.14      = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.14      = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.14 help: if this is an object-safe trait, use `dyn`
#12 42.14      |
#12 42.14 1006 |     fn as_any(&self) -> &dyn (::std::any::Any) {
#12 42.14      |                          +++++               +
#12 42.14 
#12 42.14 warning: trait objects without an explicit `dyn` are deprecated
#12 42.14     --> src/proto/byzan.rs:1009:38
#12 42.14      |
#12 42.14 1009 |     fn as_any_mut(&mut self) -> &mut ::std::any::Any {
#12 42.14      |                                      ^^^^^^^^^^^^^^^
#12 42.14      |
#12 42.14      = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.14      = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.14 help: if this is an object-safe trait, use `dyn`
#12 42.14      |
#12 42.14 1009 |     fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
#12 42.14      |                                      +++++               +
#12 42.14 
#12 42.14 warning: trait objects without an explicit `dyn` are deprecated
#12 42.14     --> src/proto/byzan.rs:1012:55
#12 42.14      |
#12 42.14 1012 |     fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
#12 42.14      |                                                       ^^^^^^^^^^^^^^^
#12 42.14      |
#12 42.14      = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.14      = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.14 help: if this is an object-safe trait, use `dyn`
#12 42.14      |
#12 42.14 1012 |     fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
#12 42.14      |                                                       +++++               +
#12 42.14 
#12 42.14 warning: trait objects without an explicit `dyn` are deprecated
#12 42.14     --> src/proto/byzan.rs:1169:26
#12 42.14      |
#12 42.14 1169 |     fn as_any(&self) -> &::std::any::Any {
#12 42.14      |                          ^^^^^^^^^^^^^^^
#12 42.14      |
#12 42.14      = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.14      = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.14 help: if this is an object-safe trait, use `dyn`
#12 42.14      |
#12 42.14 1169 |     fn as_any(&self) -> &dyn (::std::any::Any) {
#12 42.14      |                          +++++               +
#12 42.14 
#12 42.14 warning: trait objects without an explicit `dyn` are deprecated
#12 42.14     --> src/proto/byzan.rs:1172:38
#12 42.14      |
#12 42.14 1172 |     fn as_any_mut(&mut self) -> &mut ::std::any::Any {
#12 42.14      |                                      ^^^^^^^^^^^^^^^
#12 42.14      |
#12 42.14      = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.14      = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.14 help: if this is an object-safe trait, use `dyn`
#12 42.14      |
#12 42.14 1172 |     fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
#12 42.14      |                                      +++++               +
#12 42.14 
#12 42.14 warning: trait objects without an explicit `dyn` are deprecated
#12 42.14     --> src/proto/byzan.rs:1175:55
#12 42.14      |
#12 42.14 1175 |     fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
#12 42.14      |                                                       ^^^^^^^^^^^^^^^
#12 42.14      |
#12 42.14      = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.14      = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.14 help: if this is an object-safe trait, use `dyn`
#12 42.14      |
#12 42.14 1175 |     fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
#12 42.14      |                                                       +++++               +
#12 42.14 
#12 42.14 warning: trait objects without an explicit `dyn` are deprecated
#12 42.14     --> src/proto/byzan.rs:1354:26
#12 42.14      |
#12 42.14 1354 |     fn as_any(&self) -> &::std::any::Any {
#12 42.14      |                          ^^^^^^^^^^^^^^^
#12 42.14      |
#12 42.14      = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.14      = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.14 help: if this is an object-safe trait, use `dyn`
#12 42.14      |
#12 42.14 1354 |     fn as_any(&self) -> &dyn (::std::any::Any) {
#12 42.14      |                          +++++               +
#12 42.14 
#12 42.14 warning: trait objects without an explicit `dyn` are deprecated
#12 42.14     --> src/proto/byzan.rs:1357:38
#12 42.14      |
#12 42.14 1357 |     fn as_any_mut(&mut self) -> &mut ::std::any::Any {
#12 42.14      |                                      ^^^^^^^^^^^^^^^
#12 42.14      |
#12 42.14      = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.14      = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.14 help: if this is an object-safe trait, use `dyn`
#12 42.14      |
#12 42.14 1357 |     fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
#12 42.14      |                                      +++++               +
#12 42.14 
#12 42.14 warning: trait objects without an explicit `dyn` are deprecated
#12 42.14     --> src/proto/byzan.rs:1360:55
#12 42.14      |
#12 42.14 1360 |     fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
#12 42.14      |                                                       ^^^^^^^^^^^^^^^
#12 42.14      |
#12 42.14      = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.14      = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.14 help: if this is an object-safe trait, use `dyn`
#12 42.14      |
#12 42.14 1360 |     fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
#12 42.14      |                                                       +++++               +
#12 42.14 
#12 42.14 warning: trait objects without an explicit `dyn` are deprecated
#12 42.14     --> src/proto/byzan.rs:1516:26
#12 42.14      |
#12 42.14 1516 |     fn as_any(&self) -> &::std::any::Any {
#12 42.14      |                          ^^^^^^^^^^^^^^^
#12 42.14      |
#12 42.14      = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.14      = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.14 help: if this is an object-safe trait, use `dyn`
#12 42.14      |
#12 42.14 1516 |     fn as_any(&self) -> &dyn (::std::any::Any) {
#12 42.14      |                          +++++               +
#12 42.14 
#12 42.14 warning: trait objects without an explicit `dyn` are deprecated
#12 42.14     --> src/proto/byzan.rs:1519:38
#12 42.14      |
#12 42.14 1519 |     fn as_any_mut(&mut self) -> &mut ::std::any::Any {
#12 42.14      |                                      ^^^^^^^^^^^^^^^
#12 42.14      |
#12 42.14      = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.14      = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.14 help: if this is an object-safe trait, use `dyn`
#12 42.14      |
#12 42.14 1519 |     fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
#12 42.14      |                                      +++++               +
#12 42.14 
#12 42.14 warning: trait objects without an explicit `dyn` are deprecated
#12 42.14     --> src/proto/byzan.rs:1522:55
#12 42.14      |
#12 42.14 1522 |     fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
#12 42.14      |                                                       ^^^^^^^^^^^^^^^
#12 42.14      |
#12 42.14      = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.14      = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.14 help: if this is an object-safe trait, use `dyn`
#12 42.14      |
#12 42.14 1522 |     fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
#12 42.14      |                                                       +++++               +
#12 42.14 
#12 42.14 warning: trait objects without an explicit `dyn` are deprecated
#12 42.14     --> src/proto/byzan.rs:1730:26
#12 42.14      |
#12 42.14 1730 |     fn as_any(&self) -> &::std::any::Any {
#12 42.14      |                          ^^^^^^^^^^^^^^^
#12 42.14      |
#12 42.14      = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.14      = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.14 help: if this is an object-safe trait, use `dyn`
#12 42.14      |
#12 42.14 1730 |     fn as_any(&self) -> &dyn (::std::any::Any) {
#12 42.14      |                          +++++               +
#12 42.14 
#12 42.14 warning: trait objects without an explicit `dyn` are deprecated
#12 42.14     --> src/proto/byzan.rs:1733:38
#12 42.14      |
#12 42.14 1733 |     fn as_any_mut(&mut self) -> &mut ::std::any::Any {
#12 42.14      |                                      ^^^^^^^^^^^^^^^
#12 42.14      |
#12 42.14      = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.14      = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.14 help: if this is an object-safe trait, use `dyn`
#12 42.14      |
#12 42.14 1733 |     fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
#12 42.14      |                                      +++++               +
#12 42.14 
#12 42.14 warning: trait objects without an explicit `dyn` are deprecated
#12 42.14     --> src/proto/byzan.rs:1736:55
#12 42.14      |
#12 42.14 1736 |     fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
#12 42.14      |                                                       ^^^^^^^^^^^^^^^
#12 42.14      |
#12 42.14      = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.14      = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.14 help: if this is an object-safe trait, use `dyn`
#12 42.14      |
#12 42.14 1736 |     fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
#12 42.14      |                                                       +++++               +
#12 42.14 
#12 42.14 warning: trait objects without an explicit `dyn` are deprecated
#12 42.14     --> src/proto/byzan.rs:1942:26
#12 42.14      |
#12 42.14 1942 |     fn as_any(&self) -> &::std::any::Any {
#12 42.14      |                          ^^^^^^^^^^^^^^^
#12 42.14      |
#12 42.14      = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.14      = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.14 help: if this is an object-safe trait, use `dyn`
#12 42.14      |
#12 42.14 1942 |     fn as_any(&self) -> &dyn (::std::any::Any) {
#12 42.14      |                          +++++               +
#12 42.14 
#12 42.14 warning: trait objects without an explicit `dyn` are deprecated
#12 42.14     --> src/proto/byzan.rs:1945:38
#12 42.14      |
#12 42.14 1945 |     fn as_any_mut(&mut self) -> &mut ::std::any::Any {
#12 42.14      |                                      ^^^^^^^^^^^^^^^
#12 42.14      |
#12 42.14      = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.14      = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.14 help: if this is an object-safe trait, use `dyn`
#12 42.14      |
#12 42.14 1945 |     fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
#12 42.14      |                                      +++++               +
#12 42.14 
#12 42.14 warning: trait objects without an explicit `dyn` are deprecated
#12 42.14     --> src/proto/byzan.rs:1948:55
#12 42.14      |
#12 42.14 1948 |     fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
#12 42.14      |                                                       ^^^^^^^^^^^^^^^
#12 42.14      |
#12 42.14      = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.14      = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.14 help: if this is an object-safe trait, use `dyn`
#12 42.14      |
#12 42.14 1948 |     fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
#12 42.14      |                                                       +++++               +
#12 42.14 
#12 42.15 warning: trait objects without an explicit `dyn` are deprecated
#12 42.15     --> src/proto/byzan.rs:2140:26
#12 42.15      |
#12 42.15 2140 |     fn as_any(&self) -> &::std::any::Any {
#12 42.15      |                          ^^^^^^^^^^^^^^^
#12 42.15      |
#12 42.15      = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.15      = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.15 help: if this is an object-safe trait, use `dyn`
#12 42.15      |
#12 42.15 2140 |     fn as_any(&self) -> &dyn (::std::any::Any) {
#12 42.15      |                          +++++               +
#12 42.15 
#12 42.15 warning: trait objects without an explicit `dyn` are deprecated
#12 42.15     --> src/proto/byzan.rs:2143:38
#12 42.15      |
#12 42.15 2143 |     fn as_any_mut(&mut self) -> &mut ::std::any::Any {
#12 42.15      |                                      ^^^^^^^^^^^^^^^
#12 42.15      |
#12 42.15      = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.15      = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.15 help: if this is an object-safe trait, use `dyn`
#12 42.15      |
#12 42.15 2143 |     fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
#12 42.15      |                                      +++++               +
#12 42.15 
#12 42.15 warning: trait objects without an explicit `dyn` are deprecated
#12 42.15     --> src/proto/byzan.rs:2146:55
#12 42.15      |
#12 42.15 2146 |     fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
#12 42.15      |                                                       ^^^^^^^^^^^^^^^
#12 42.15      |
#12 42.15      = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.15      = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.15 help: if this is an object-safe trait, use `dyn`
#12 42.15      |
#12 42.15 2146 |     fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
#12 42.15      |                                                       +++++               +
#12 42.15 
#12 42.29 warning: trait objects without an explicit `dyn` are deprecated
#12 42.29   --> src/proto/byzan.rs:81:18
#12 42.29    |
#12 42.29 81 |         self as &::std::any::Any
#12 42.29    |                  ^^^^^^^^^^^^^^^
#12 42.29    |
#12 42.29    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.29    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.29 help: if this is an object-safe trait, use `dyn`
#12 42.29    |
#12 42.29 81 |         self as &dyn (::std::any::Any)
#12 42.29    |                  +++++               +
#12 42.29 
#12 42.29 warning: trait objects without an explicit `dyn` are deprecated
#12 42.29   --> src/proto/byzan.rs:84:22
#12 42.29    |
#12 42.29 84 |         self as &mut ::std::any::Any
#12 42.29    |                      ^^^^^^^^^^^^^^^
#12 42.29    |
#12 42.29    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.29    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.29 help: if this is an object-safe trait, use `dyn`
#12 42.29    |
#12 42.29 84 |         self as &mut dyn (::std::any::Any)
#12 42.29    |                      +++++               +
#12 42.29 
#12 42.30 warning: trait objects without an explicit `dyn` are deprecated
#12 42.30    --> src/proto/byzan.rs:310:18
#12 42.30     |
#12 42.30 310 |         self as &::std::any::Any
#12 42.30     |                  ^^^^^^^^^^^^^^^
#12 42.30     |
#12 42.30     = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.30     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.30 help: if this is an object-safe trait, use `dyn`
#12 42.30     |
#12 42.30 310 |         self as &dyn (::std::any::Any)
#12 42.30     |                  +++++               +
#12 42.30 
#12 42.30 warning: trait objects without an explicit `dyn` are deprecated
#12 42.30    --> src/proto/byzan.rs:313:22
#12 42.30     |
#12 42.30 313 |         self as &mut ::std::any::Any
#12 42.30     |                      ^^^^^^^^^^^^^^^
#12 42.30     |
#12 42.30     = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.30     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.30 help: if this is an object-safe trait, use `dyn`
#12 42.30     |
#12 42.30 313 |         self as &mut dyn (::std::any::Any)
#12 42.30     |                      +++++               +
#12 42.30 
#12 42.31 warning: trait objects without an explicit `dyn` are deprecated
#12 42.31    --> src/proto/byzan.rs:658:18
#12 42.31     |
#12 42.31 658 |         self as &::std::any::Any
#12 42.31     |                  ^^^^^^^^^^^^^^^
#12 42.31     |
#12 42.31     = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.31     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.31 help: if this is an object-safe trait, use `dyn`
#12 42.31     |
#12 42.31 658 |         self as &dyn (::std::any::Any)
#12 42.31     |                  +++++               +
#12 42.31 
#12 42.31 warning: trait objects without an explicit `dyn` are deprecated
#12 42.31    --> src/proto/byzan.rs:661:22
#12 42.31     |
#12 42.31 661 |         self as &mut ::std::any::Any
#12 42.31     |                      ^^^^^^^^^^^^^^^
#12 42.31     |
#12 42.31     = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.31     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.31 help: if this is an object-safe trait, use `dyn`
#12 42.31     |
#12 42.31 661 |         self as &mut dyn (::std::any::Any)
#12 42.31     |                      +++++               +
#12 42.31 
#12 42.31 warning: trait objects without an explicit `dyn` are deprecated
#12 42.31    --> src/proto/byzan.rs:851:18
#12 42.31     |
#12 42.31 851 |         self as &::std::any::Any
#12 42.31     |                  ^^^^^^^^^^^^^^^
#12 42.31     |
#12 42.31     = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.31     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.31 help: if this is an object-safe trait, use `dyn`
#12 42.31     |
#12 42.31 851 |         self as &dyn (::std::any::Any)
#12 42.31     |                  +++++               +
#12 42.31 
#12 42.31 warning: trait objects without an explicit `dyn` are deprecated
#12 42.31    --> src/proto/byzan.rs:854:22
#12 42.31     |
#12 42.31 854 |         self as &mut ::std::any::Any
#12 42.31     |                      ^^^^^^^^^^^^^^^
#12 42.31     |
#12 42.31     = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.31     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.31 help: if this is an object-safe trait, use `dyn`
#12 42.31     |
#12 42.31 854 |         self as &mut dyn (::std::any::Any)
#12 42.31     |                      +++++               +
#12 42.31 
#12 42.31 warning: trait objects without an explicit `dyn` are deprecated
#12 42.31     --> src/proto/byzan.rs:1007:18
#12 42.31      |
#12 42.31 1007 |         self as &::std::any::Any
#12 42.31      |                  ^^^^^^^^^^^^^^^
#12 42.31      |
#12 42.31      = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.31      = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.31 help: if this is an object-safe trait, use `dyn`
#12 42.31      |
#12 42.31 1007 |         self as &dyn (::std::any::Any)
#12 42.31      |                  +++++               +
#12 42.31 
#12 42.31 warning: trait objects without an explicit `dyn` are deprecated
#12 42.31     --> src/proto/byzan.rs:1010:22
#12 42.31      |
#12 42.31 1010 |         self as &mut ::std::any::Any
#12 42.31      |                      ^^^^^^^^^^^^^^^
#12 42.31      |
#12 42.31      = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.31      = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.31 help: if this is an object-safe trait, use `dyn`
#12 42.31      |
#12 42.31 1010 |         self as &mut dyn (::std::any::Any)
#12 42.31      |                      +++++               +
#12 42.31 
#12 42.32 warning: trait objects without an explicit `dyn` are deprecated
#12 42.32     --> src/proto/byzan.rs:1170:18
#12 42.32      |
#12 42.32 1170 |         self as &::std::any::Any
#12 42.32      |                  ^^^^^^^^^^^^^^^
#12 42.32      |
#12 42.32      = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.32      = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.32 help: if this is an object-safe trait, use `dyn`
#12 42.32      |
#12 42.32 1170 |         self as &dyn (::std::any::Any)
#12 42.32      |                  +++++               +
#12 42.32 
#12 42.32 warning: trait objects without an explicit `dyn` are deprecated
#12 42.32     --> src/proto/byzan.rs:1173:22
#12 42.32      |
#12 42.32 1173 |         self as &mut ::std::any::Any
#12 42.32      |                      ^^^^^^^^^^^^^^^
#12 42.32      |
#12 42.32      = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.32      = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.32 help: if this is an object-safe trait, use `dyn`
#12 42.32      |
#12 42.32 1173 |         self as &mut dyn (::std::any::Any)
#12 42.32      |                      +++++               +
#12 42.32 
#12 42.32 warning: trait objects without an explicit `dyn` are deprecated
#12 42.32     --> src/proto/byzan.rs:1355:18
#12 42.32      |
#12 42.32 1355 |         self as &::std::any::Any
#12 42.32      |                  ^^^^^^^^^^^^^^^
#12 42.32      |
#12 42.32      = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.32      = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.32 help: if this is an object-safe trait, use `dyn`
#12 42.32      |
#12 42.32 1355 |         self as &dyn (::std::any::Any)
#12 42.32      |                  +++++               +
#12 42.32 
#12 42.32 warning: trait objects without an explicit `dyn` are deprecated
#12 42.32     --> src/proto/byzan.rs:1358:22
#12 42.32      |
#12 42.32 1358 |         self as &mut ::std::any::Any
#12 42.32      |                      ^^^^^^^^^^^^^^^
#12 42.32      |
#12 42.32      = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.32      = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.32 help: if this is an object-safe trait, use `dyn`
#12 42.32      |
#12 42.32 1358 |         self as &mut dyn (::std::any::Any)
#12 42.32      |                      +++++               +
#12 42.32 
#12 42.33 warning: trait objects without an explicit `dyn` are deprecated
#12 42.33     --> src/proto/byzan.rs:1517:18
#12 42.33      |
#12 42.33 1517 |         self as &::std::any::Any
#12 42.33      |                  ^^^^^^^^^^^^^^^
#12 42.33      |
#12 42.33      = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.33      = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.33 help: if this is an object-safe trait, use `dyn`
#12 42.33      |
#12 42.33 1517 |         self as &dyn (::std::any::Any)
#12 42.33      |                  +++++               +
#12 42.33 
#12 42.33 warning: trait objects without an explicit `dyn` are deprecated
#12 42.33     --> src/proto/byzan.rs:1520:22
#12 42.33      |
#12 42.33 1520 |         self as &mut ::std::any::Any
#12 42.33      |                      ^^^^^^^^^^^^^^^
#12 42.33      |
#12 42.33      = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.33      = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.33 help: if this is an object-safe trait, use `dyn`
#12 42.33      |
#12 42.33 1520 |         self as &mut dyn (::std::any::Any)
#12 42.33      |                      +++++               +
#12 42.33 
#12 42.33 warning: trait objects without an explicit `dyn` are deprecated
#12 42.33     --> src/proto/byzan.rs:1731:18
#12 42.33      |
#12 42.33 1731 |         self as &::std::any::Any
#12 42.33      |                  ^^^^^^^^^^^^^^^
#12 42.33      |
#12 42.33      = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.33      = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.33 help: if this is an object-safe trait, use `dyn`
#12 42.33      |
#12 42.33 1731 |         self as &dyn (::std::any::Any)
#12 42.33      |                  +++++               +
#12 42.33 
#12 42.33 warning: trait objects without an explicit `dyn` are deprecated
#12 42.33     --> src/proto/byzan.rs:1734:22
#12 42.33      |
#12 42.33 1734 |         self as &mut ::std::any::Any
#12 42.33      |                      ^^^^^^^^^^^^^^^
#12 42.33      |
#12 42.33      = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.33      = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.33 help: if this is an object-safe trait, use `dyn`
#12 42.33      |
#12 42.33 1734 |         self as &mut dyn (::std::any::Any)
#12 42.33      |                      +++++               +
#12 42.33 
#12 42.34 warning: trait objects without an explicit `dyn` are deprecated
#12 42.34     --> src/proto/byzan.rs:1943:18
#12 42.34      |
#12 42.34 1943 |         self as &::std::any::Any
#12 42.34      |                  ^^^^^^^^^^^^^^^
#12 42.34      |
#12 42.34      = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.34      = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.34 help: if this is an object-safe trait, use `dyn`
#12 42.34      |
#12 42.34 1943 |         self as &dyn (::std::any::Any)
#12 42.34      |                  +++++               +
#12 42.34 
#12 42.34 warning: trait objects without an explicit `dyn` are deprecated
#12 42.34     --> src/proto/byzan.rs:1946:22
#12 42.34      |
#12 42.34 1946 |         self as &mut ::std::any::Any
#12 42.34      |                      ^^^^^^^^^^^^^^^
#12 42.34      |
#12 42.34      = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.34      = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.34 help: if this is an object-safe trait, use `dyn`
#12 42.34      |
#12 42.34 1946 |         self as &mut dyn (::std::any::Any)
#12 42.34      |                      +++++               +
#12 42.34 
#12 42.34 warning: trait objects without an explicit `dyn` are deprecated
#12 42.34     --> src/proto/byzan.rs:2141:18
#12 42.34      |
#12 42.34 2141 |         self as &::std::any::Any
#12 42.34      |                  ^^^^^^^^^^^^^^^
#12 42.34      |
#12 42.34      = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.34      = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.34 help: if this is an object-safe trait, use `dyn`
#12 42.34      |
#12 42.34 2141 |         self as &dyn (::std::any::Any)
#12 42.34      |                  +++++               +
#12 42.34 
#12 42.34 warning: trait objects without an explicit `dyn` are deprecated
#12 42.34     --> src/proto/byzan.rs:2144:22
#12 42.34      |
#12 42.34 2144 |         self as &mut ::std::any::Any
#12 42.34      |                      ^^^^^^^^^^^^^^^
#12 42.34      |
#12 42.34      = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.34      = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.34 help: if this is an object-safe trait, use `dyn`
#12 42.34      |
#12 42.34 2144 |         self as &mut dyn (::std::any::Any)
#12 42.34      |                      +++++               +
#12 42.34 
#12 42.36 warning: trait objects without an explicit `dyn` are deprecated
#12 42.36   --> src/main.rs:90:48
#12 42.36    |
#12 42.36 90 |         let mut logger = Vec::<std::boxed::Box<simplelog::SharedLogger + 'static>>::new();
#12 42.36    |                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#12 42.36    |
#12 42.36    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
#12 42.36    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
#12 42.36 help: if this is an object-safe trait, use `dyn`
#12 42.36    |
#12 42.36 90 |         let mut logger = Vec::<std::boxed::Box<dyn simplelog::SharedLogger + 'static>>::new();
#12 42.36    |                                                +++
#12 42.36 
#12 44.32 warning: `byzd` (bin "byz_checker") generated 55 warnings (run `cargo fix --bin "byz_checker"` to apply 55 suggestions)
#12 45.17 warning: `byzd` (bin "byz") generated 60 warnings (55 duplicates)
#12 46.25 warning: `byzd` (bin "byzd") generated 65 warnings (run `cargo fix --bin "byzd"` to apply 56 suggestions)
#12 46.25     Finished `release` profile [optimized] target(s) in 45.37s
#12 DONE 49.1s

#13 exporting to image
#13 exporting layers
#13 exporting layers 5.2s done
#13 writing image sha256:826cd287cda45672db4d56a8a09ee85fa0455cc2107712a57a71f58c871da5a7 0.0s done
#13 naming to docker.io/library/image_name_v1_1 0.0s done
#13 DONE 5.2s
Duration: 3:26.31