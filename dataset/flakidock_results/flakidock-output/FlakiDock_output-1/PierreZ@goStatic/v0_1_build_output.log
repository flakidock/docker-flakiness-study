#0 building with "default" instance using docker driver

#1 [internal] load build definition from Dockerfile
#1 transferring dockerfile:
#1 transferring dockerfile: 1.06kB done
#1 DONE 0.4s

#2 [internal] load .dockerignore
#2 transferring context: 2B done
#2 DONE 0.5s

#3 [internal] load metadata for docker.io/library/golang:latest
#3 ...

#4 [auth] library/golang:pull token for registry-1.docker.io
#4 DONE 0.0s

#3 [internal] load metadata for docker.io/library/golang:latest
#3 DONE 1.4s

#5 [internal] load build context
#5 DONE 0.0s

#6 [builder 1/4] FROM docker.io/library/golang:latest@sha256:86a3c48a61915a8c62c0e1d7594730399caa3feb73655dfe96c7bc17710e96cf
#6 resolve docker.io/library/golang:latest@sha256:86a3c48a61915a8c62c0e1d7594730399caa3feb73655dfe96c7bc17710e96cf 0.1s done
#6 sha256:86a3c48a61915a8c62c0e1d7594730399caa3feb73655dfe96c7bc17710e96cf 9.74kB / 9.74kB done
#6 sha256:a07daa84ec6c320c62f1fddb40b84698de004aac1c5ceb28243d674952d536f3 2.32kB / 2.32kB done
#6 sha256:a61b645b609b758e4c0a9c57efbba8ccc610abb4d96544cedd8411aa1c9e4b09 2.82kB / 2.82kB done
#6 ...

#5 [internal] load build context
#5 transferring context: 7.99MB 0.2s done
#5 DONE 0.6s

#6 [builder 1/4] FROM docker.io/library/golang:latest@sha256:86a3c48a61915a8c62c0e1d7594730399caa3feb73655dfe96c7bc17710e96cf
#6 sha256:5e53f8e7a11a56a5e15226ca5d9a2f740b0e5aa702ca2616748207531fee32ca 0B / 92.23MB 0.6s
#6 sha256:32a2f51ff3dde07bfa1ce35b5597b2d97295e64a461d98e696feda7b25a6dc5f 0B / 69.35MB 0.6s
#6 sha256:5e53f8e7a11a56a5e15226ca5d9a2f740b0e5aa702ca2616748207531fee32ca 7.34MB / 92.23MB 0.7s
#6 sha256:ddb1467b736f6b84ad01493f98b050ed46efd37c54e4307fffc56ed028fdeab6 0B / 126B 0.7s
#6 sha256:5e53f8e7a11a56a5e15226ca5d9a2f740b0e5aa702ca2616748207531fee32ca 14.68MB / 92.23MB 0.9s
#6 sha256:32a2f51ff3dde07bfa1ce35b5597b2d97295e64a461d98e696feda7b25a6dc5f 8.39MB / 69.35MB 0.9s
#6 sha256:ddb1467b736f6b84ad01493f98b050ed46efd37c54e4307fffc56ed028fdeab6 126B / 126B 0.8s done
#6 sha256:4f4fb700ef54461cfa02571ae0db9a0dc1e0cdb5577484a6d75e68dc38e8acc1 0B / 32B 0.9s
#6 sha256:5e53f8e7a11a56a5e15226ca5d9a2f740b0e5aa702ca2616748207531fee32ca 25.17MB / 92.23MB 1.1s
#6 sha256:32a2f51ff3dde07bfa1ce35b5597b2d97295e64a461d98e696feda7b25a6dc5f 17.83MB / 69.35MB 1.1s
#6 sha256:4f4fb700ef54461cfa02571ae0db9a0dc1e0cdb5577484a6d75e68dc38e8acc1 32B / 32B 1.0s done
#6 sha256:5e53f8e7a11a56a5e15226ca5d9a2f740b0e5aa702ca2616748207531fee32ca 35.65MB / 92.23MB 1.3s
#6 sha256:32a2f51ff3dde07bfa1ce35b5597b2d97295e64a461d98e696feda7b25a6dc5f 24.12MB / 69.35MB 1.3s
#6 sha256:5e53f8e7a11a56a5e15226ca5d9a2f740b0e5aa702ca2616748207531fee32ca 41.94MB / 92.23MB 1.4s
#6 sha256:32a2f51ff3dde07bfa1ce35b5597b2d97295e64a461d98e696feda7b25a6dc5f 28.31MB / 69.35MB 1.4s
#6 sha256:32a2f51ff3dde07bfa1ce35b5597b2d97295e64a461d98e696feda7b25a6dc5f 33.55MB / 69.35MB 1.5s
#6 sha256:5e53f8e7a11a56a5e15226ca5d9a2f740b0e5aa702ca2616748207531fee32ca 57.67MB / 92.23MB 1.7s
#6 sha256:32a2f51ff3dde07bfa1ce35b5597b2d97295e64a461d98e696feda7b25a6dc5f 42.16MB / 69.35MB 1.7s
#6 sha256:5e53f8e7a11a56a5e15226ca5d9a2f740b0e5aa702ca2616748207531fee32ca 63.96MB / 92.23MB 1.8s
#6 sha256:32a2f51ff3dde07bfa1ce35b5597b2d97295e64a461d98e696feda7b25a6dc5f 48.23MB / 69.35MB 1.8s
#6 sha256:5e53f8e7a11a56a5e15226ca5d9a2f740b0e5aa702ca2616748207531fee32ca 74.45MB / 92.23MB 2.0s
#6 sha256:32a2f51ff3dde07bfa1ce35b5597b2d97295e64a461d98e696feda7b25a6dc5f 59.77MB / 69.35MB 2.0s
#6 sha256:5e53f8e7a11a56a5e15226ca5d9a2f740b0e5aa702ca2616748207531fee32ca 80.74MB / 92.23MB 2.1s
#6 sha256:32a2f51ff3dde07bfa1ce35b5597b2d97295e64a461d98e696feda7b25a6dc5f 65.02MB / 69.35MB 2.1s
#6 sha256:5e53f8e7a11a56a5e15226ca5d9a2f740b0e5aa702ca2616748207531fee32ca 88.08MB / 92.23MB 2.3s
#6 sha256:32a2f51ff3dde07bfa1ce35b5597b2d97295e64a461d98e696feda7b25a6dc5f 69.35MB / 69.35MB 2.3s
#6 sha256:32a2f51ff3dde07bfa1ce35b5597b2d97295e64a461d98e696feda7b25a6dc5f 69.35MB / 69.35MB 3.2s done
#6 sha256:5e53f8e7a11a56a5e15226ca5d9a2f740b0e5aa702ca2616748207531fee32ca 92.23MB / 92.23MB 4.7s done
#6 extracting sha256:5e53f8e7a11a56a5e15226ca5d9a2f740b0e5aa702ca2616748207531fee32ca 0.1s
#6 extracting sha256:5e53f8e7a11a56a5e15226ca5d9a2f740b0e5aa702ca2616748207531fee32ca 5.1s
#6 extracting sha256:5e53f8e7a11a56a5e15226ca5d9a2f740b0e5aa702ca2616748207531fee32ca 5.2s done
#6 extracting sha256:32a2f51ff3dde07bfa1ce35b5597b2d97295e64a461d98e696feda7b25a6dc5f
#6 extracting sha256:32a2f51ff3dde07bfa1ce35b5597b2d97295e64a461d98e696feda7b25a6dc5f 5.2s
#6 extracting sha256:32a2f51ff3dde07bfa1ce35b5597b2d97295e64a461d98e696feda7b25a6dc5f 5.3s done
#6 extracting sha256:ddb1467b736f6b84ad01493f98b050ed46efd37c54e4307fffc56ed028fdeab6
#6 extracting sha256:ddb1467b736f6b84ad01493f98b050ed46efd37c54e4307fffc56ed028fdeab6 done
#6 extracting sha256:4f4fb700ef54461cfa02571ae0db9a0dc1e0cdb5577484a6d75e68dc38e8acc1
#6 extracting sha256:4f4fb700ef54461cfa02571ae0db9a0dc1e0cdb5577484a6d75e68dc38e8acc1 done
#6 DONE 17.9s

#7 [builder 2/4] WORKDIR /go/src/github.com/PierreZ/goStatic
#7 DONE 10.7s

#8 [builder 3/4] COPY . .
#8 DONE 0.8s

#9 [builder 4/4] RUN mkdir ./bin &&     apt-get update && apt-get install -y upx &&     GOOS=$(echo linux/amd64 | cut -f1 -d/) &&     GOARCH=$(echo linux/amd64 | cut -f2 -d/) &&     GOARM=$(echo linux/amd64 | cut -f3 -d/ | sed "s/v//" ) &&     CGO_ENABLED=0 GOOS=${GOOS} GOARCH=${GOARCH} GOARM=${GOARM} go build ${BUILD_ARGS} -ldflags="-s" -tags netgo -installsuffix netgo -o ./bin/goStatic &&     mkdir ./bin/etc &&     ID=$(shuf -i 100-9999 -n 1) &&     upx -9 ./bin/goStatic &&     echo $ID &&     echo "appuser:x:$ID:$ID::/sbin/nologin:/bin/false" > ./bin/etc/passwd &&     echo "appgroup:x:$ID:appuser" > ./bin/etc/group
#9 2.331 Get:1 http://deb.debian.org/debian bookworm InRelease [151 kB]
#9 2.361 Get:2 http://deb.debian.org/debian bookworm-updates InRelease [55.4 kB]
#9 2.372 Get:3 http://deb.debian.org/debian-security bookworm-security InRelease [48.0 kB]
#9 2.497 Get:4 http://deb.debian.org/debian bookworm/main amd64 Packages [8788 kB]
#9 2.632 Get:5 http://deb.debian.org/debian bookworm-updates/main amd64 Packages [13.8 kB]
#9 2.643 Get:6 http://deb.debian.org/debian-security bookworm-security/main amd64 Packages [169 kB]
#9 3.939 Fetched 9225 kB in 2s (5654 kB/s)
#9 3.939 Reading package lists...
#9 4.644 Reading package lists...
#9 5.324 Building dependency tree...
#9 5.452 Reading state information...
#9 5.462 E: Unable to locate package upx
#9 ERROR: process "/bin/sh -c mkdir ./bin &&     apt-get update && apt-get install -y upx &&     GOOS=$(echo $TARGETPLATFORM | cut -f1 -d/) &&     GOARCH=$(echo $TARGETPLATFORM | cut -f2 -d/) &&     GOARM=$(echo $TARGETPLATFORM | cut -f3 -d/ | sed \"s/v//\" ) &&     CGO_ENABLED=0 GOOS=${GOOS} GOARCH=${GOARCH} GOARM=${GOARM} go build ${BUILD_ARGS} -ldflags=\"-s\" -tags netgo -installsuffix netgo -o ./bin/goStatic &&     mkdir ./bin/etc &&     ID=$(shuf -i 100-9999 -n 1) &&     upx -9 ./bin/goStatic &&     echo $ID &&     echo \"appuser:x:$ID:$ID::/sbin/nologin:/bin/false\" > ./bin/etc/passwd &&     echo \"appgroup:x:$ID:appuser\" > ./bin/etc/group" did not complete successfully: exit code: 100
------
 > [builder 4/4] RUN mkdir ./bin &&     apt-get update && apt-get install -y upx &&     GOOS=$(echo linux/amd64 | cut -f1 -d/) &&     GOARCH=$(echo linux/amd64 | cut -f2 -d/) &&     GOARM=$(echo linux/amd64 | cut -f3 -d/ | sed "s/v//" ) &&     CGO_ENABLED=0 GOOS=${GOOS} GOARCH=${GOARCH} GOARM=${GOARM} go build ${BUILD_ARGS} -ldflags="-s" -tags netgo -installsuffix netgo -o ./bin/goStatic &&     mkdir ./bin/etc &&     ID=$(shuf -i 100-9999 -n 1) &&     upx -9 ./bin/goStatic &&     echo $ID &&     echo "appuser:x:$ID:$ID::/sbin/nologin:/bin/false" > ./bin/etc/passwd &&     echo "appgroup:x:$ID:appuser" > ./bin/etc/group:
2.331 Get:1 http://deb.debian.org/debian bookworm InRelease [151 kB]
2.361 Get:2 http://deb.debian.org/debian bookworm-updates InRelease [55.4 kB]
2.372 Get:3 http://deb.debian.org/debian-security bookworm-security InRelease [48.0 kB]
2.497 Get:4 http://deb.debian.org/debian bookworm/main amd64 Packages [8788 kB]
2.632 Get:5 http://deb.debian.org/debian bookworm-updates/main amd64 Packages [13.8 kB]
2.643 Get:6 http://deb.debian.org/debian-security bookworm-security/main amd64 Packages [169 kB]



5.462 E: Unable to locate package upx
------

 [33m1 warning found (use --debug to expand):
[0m - Empty continuation line found in: RUN mkdir ./bin &&     apt-get update && apt-get install -y upx &&     GOOS=$(echo $TARGETPLATFORM | cut -f1 -d/) &&     GOARCH=$(echo $TARGETPLATFORM | cut -f2 -d/) &&     GOARM=$(echo $TARGETPLATFORM | cut -f3 -d/ | sed "s/v//" ) &&     CGO_ENABLED=0 GOOS=${GOOS} GOARCH=${GOARCH} GOARM=${GOARM} go build ${BUILD_ARGS} -ldflags="-s" -tags netgo -installsuffix netgo -o ./bin/goStatic &&     mkdir ./bin/etc &&     ID=$(shuf -i 100-9999 -n 1) &&     upx -9 ./bin/goStatic &&     echo $ID &&     echo "appuser:x:$ID:$ID::/sbin/nologin:/bin/false" > ./bin/etc/passwd &&     echo "appgroup:x:$ID:appuser" > ./bin/etc/group
Dockerfile:9
--------------------
   8 |     
   9 | >>> RUN mkdir ./bin && \
  10 | >>>     apt-get update && apt-get install -y upx && \
  11 | >>> 
  12 | >>>     # getting right vars from docker buildx
  13 | >>>     # especially to handle linux/arm/v6 for example
  14 | >>>     GOOS=$(echo $TARGETPLATFORM | cut -f1 -d/) && \
  15 | >>>     GOARCH=$(echo $TARGETPLATFORM | cut -f2 -d/) && \
  16 | >>>     GOARM=$(echo $TARGETPLATFORM | cut -f3 -d/ | sed "s/v//" ) && \
  17 | >>> 
  18 | >>>     CGO_ENABLED=0 GOOS=${GOOS} GOARCH=${GOARCH} GOARM=${GOARM} go build ${BUILD_ARGS} -ldflags="-s" -tags netgo -installsuffix netgo -o ./bin/goStatic && \
  19 | >>> 
  20 | >>>     mkdir ./bin/etc && \
  21 | >>>     ID=$(shuf -i 100-9999 -n 1) && \
  22 | >>>     upx -9 ./bin/goStatic && \
  23 | >>>     echo $ID && \
  24 | >>>     echo "appuser:x:$ID:$ID::/sbin/nologin:/bin/false" > ./bin/etc/passwd && \
  25 | >>>     echo "appgroup:x:$ID:appuser" > ./bin/etc/group
  26 |     
--------------------
ERROR: failed to solve: process "/bin/sh -c mkdir ./bin &&     apt-get update && apt-get install -y upx &&     GOOS=$(echo $TARGETPLATFORM | cut -f1 -d/) &&     GOARCH=$(echo $TARGETPLATFORM | cut -f2 -d/) &&     GOARM=$(echo $TARGETPLATFORM | cut -f3 -d/ | sed \"s/v//\" ) &&     CGO_ENABLED=0 GOOS=${GOOS} GOARCH=${GOARCH} GOARM=${GOARM} go build ${BUILD_ARGS} -ldflags=\"-s\" -tags netgo -installsuffix netgo -o ./bin/goStatic &&     mkdir ./bin/etc &&     ID=$(shuf -i 100-9999 -n 1) &&     upx -9 ./bin/goStatic &&     echo $ID &&     echo \"appuser:x:$ID:$ID::/sbin/nologin:/bin/false\" > ./bin/etc/passwd &&     echo \"appgroup:x:$ID:appuser\" > ./bin/etc/group" did not complete successfully: exit code: 100
Duration: 0:38.01