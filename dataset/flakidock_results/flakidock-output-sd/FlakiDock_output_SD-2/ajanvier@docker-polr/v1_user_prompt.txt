
Below is the flaky Dockerfile:

# Dockerfile
```# Forked from TrafeX/docker-php-nginx (https://github.com/TrafeX/docker-php-nginx/)

FROM alpine:3
LABEL Maintainer="Aur√©lien JANVIER <dev@ajanvier.fr>" \
      Description="Unofficial Docker image for Polr."

# Environment variables
ENV APP_NAME My Polr
ENV APP_PROTOCOL https://
ENV DB_CONNECTION mysql
ENV DB_PORT 3306
ENV DB_DATABASE polr
ENV DB_USERNAME polr
ENV POLR_BASE 62

# Install packages and remove default server definition
RUN apk --no-cache add bash git nginx supervisor curl && \
    apk --no-cache --repository=http://dl-cdn.alpinelinux.org/alpine/edge/testing/ add php7 php7-fpm \
        php7-opcache php7-mysqli php7-json php7-openssl php7-curl php7-zlib php7-xml php7-xmlwriter \
        php7-phar php7-intl php7-dom php7-xmlreader php7-ctype php7-session php7-mbstring php7-gd \
        php7-pdo php7-pdo_mysql php7-pdo_sqlite php7-tokenizer && \
    apk add --update libintl && \
    apk add --virtual build_deps gettext &&  \
    cp /usr/bin/envsubst /usr/local/bin/envsubst && \
    rm -f /etc/nginx/conf.d/default.conf

# Configure nginx
COPY config/nginx.conf /etc/nginx/nginx.conf

# Configure PHP-FPM
COPY config/fpm-pool.conf /etc/php7/php-fpm.d/www.conf
COPY config/php.ini /etc/php7/conf.d/custom.ini

# Configure supervisord
COPY config/supervisord.conf /etc/supervisor/conf.d/supervisord.conf

# Add symbolic link for php
RUN ln -s php7 /usr/bin/php

# Install composer
RUN curl -sS https://getcomposer.org/installer \
    | php -- --install-dir=/usr/local/bin --filename=composer

# Setup document root
RUN mkdir -p /var/www/html

# Pull Polr
RUN git clone https://github.com/cydrobolt/polr.git /var/www/html

# Make sure files/folders needed by the processes are accessable when they run under the nobody user
RUN chown -R nobody.nobody /var/www/html && \
    chown -R nobody.nobody /run && \
    chown -R nobody.nobody /var/lib/nginx && \
    chown -R nobody.nobody /var/log/nginx

# Switch to use a non-root user from here on
USER nobody

# Add application
WORKDIR /var/www/html
# COPY --chown=nobody src/ /var/www/html/

# Copy env file and setup values
COPY --chown=nobody config/.env_polr .env_polr

# Copy admin seeder
COPY --chown=nobody seeders/AdminSeeder.php AdminSeeder_withoutEnv.php

# Install dependencies
RUN composer install --no-dev -o

# Setting logs permissions
RUN mkdir -p storage/logs && \
    touch storage/logs/lumen.log && \
    chmod -R go+w storage

# Copy start.sh script
COPY --chown=nobody start.sh /start.sh
RUN chmod u+x /start.sh

# Copy wait-for-it.sh
COPY --chown=nobody wait-for-it.sh /wait-for-it.sh
RUN chmod u+x /wait-for-it.sh

# Expose the port nginx is reachable on
EXPOSE 8080

# Configure a healthcheck to validate that everything is up&running
HEALTHCHECK --timeout=10s CMD curl --silent --fail http://127.0.0.1:8080/fpm-ping

# Bootup
ENTRYPOINT /wait-for-it.sh $DB_HOST:$DB_PORT --strict --timeout=120 -- /start.sh
```

And below is the build error that occurred when trying to build the Dockerfile:
# Build Error
```> [ 2/20] RUN apk --no-cache add bash git nginx supervisor curl &&     apk --no-cache --repository=http://dl-cdn.alpinelinux.org/alpine/edge/testing/ add php7 php7-fpm         php7-opcache php7-mysqli php7-json php7-openssl php7-curl php7-zlib php7-xml php7-xmlwriter         php7-phar php7-intl php7-dom php7-xmlreader php7-ctype php7-session php7-mbstring php7-gd         php7-pdo php7-pdo_mysql php7-pdo_sqlite php7-tokenizer &&     apk add --update libintl &&     apk add --virtual build_deps gettext &&      cp /usr/bin/envsubst /usr/local/bin/envsubst &&     rm -f /etc/nginx/conf.d/default.conf:
ERROR: unable to select packages:
  php7 (no such package):
    required by: world[php7]
  php7-ctype (no such package):
    required by: world[php7-ctype]
  php7-curl (no such package):
    required by: world[php7-curl]
  php7-dom (no such package):
    required by: world[php7-dom]
  php7-fpm (no such package):
    required by: world[php7-fpm]
  php7-gd (no such package):
    required by: world[php7-gd]
  php7-intl (no such package):
    required by: world[php7-intl]
  php7-json (no such package):
    required by: world[php7-json]
  php7-mbstring (no such package):
    required by: world[php7-mbstring]
  php7-mysqli (no such package):
    required by: world[php7-mysqli]
  php7-opcache (no such package):
    required by: world[php7-opcache]
  php7-openssl (no such package):
    required by: world[php7-openssl]
  php7-pdo (no such package):
    required by: world[php7-pdo]
  php7-pdo_mysql (no such package):
    required by: world[php7-pdo_mysql]
  php7-pdo_sqlite (no such package):
    required by: world[php7-pdo_sqlite]
  php7-phar (no such package):
    required by: world[php7-phar]
  php7-session (no such package):
    required by: world[php7-session]
  php7-tokenizer (no such package):
    required by: world[php7-tokenizer]
  php7-xml (no such package):
    required by: world[php7-xml]
  php7-xmlreader (no such package):
    required by: world[php7-xmlreader]
  php7-xmlwriter (no such package):
    required by: world[php7-xmlwriter]
  php7-zlib (no such package):
    required by: world[php7-zlib]
ERROR: process "/bin/sh -c apk --no-cache add bash git nginx supervisor curl &&     apk --no-cache --repository=http://dl-cdn.alpinelinux.org/alpine/edge/testing/ add php7 php7-fpm         php7-opcache php7-mysqli php7-json php7-openssl php7-curl php7-zlib php7-xml php7-xmlwriter         php7-phar php7-intl php7-dom php7-xmlreader php7-ctype php7-session php7-mbstring php7-gd         php7-pdo php7-pdo_mysql php7-pdo_sqlite php7-tokenizer &&     apk add --update libintl &&     apk add --virtual build_deps gettext &&      cp /usr/bin/envsubst /usr/local/bin/envsubst &&     rm -f /etc/nginx/conf.d/default.conf" did not complete successfully: exit code: 22```

Your task is to repair the Dockerfile based on the Dockerfile and its build error provided. To solve the problem, first, you should diagnose which part is causing the flakiness and why. Then, according to the characteristics of that flakiness, repair the Dockerfile. the output Dockerfile must be within five angle brackets:
    <<<<<
    Dockerfile content 
    >>>>>
