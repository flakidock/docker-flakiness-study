
Below is the flaky Dockerfile:

# Dockerfile
```FROM php:7.4-fpm-alpine

ENV FOP_HOME=/usr/share/fop-2.1 \
    COMPOSER_ALLOW_SUPERUSER=1 \
    LD_PRELOAD=/usr/lib/preloadable_libiconv.so

RUN set -xe \
    && apk add --no-cache --virtual .phpext-builddeps \
      gettext-dev \
      libxslt-dev \
      zlib-dev \
      libmemcached-dev \
      libzip-dev \
      oniguruma-dev \
      autoconf \
      build-base \
    && docker-php-ext-install \
      calendar \
      gettext \
      mbstring \
      mysqli \
      opcache \
      pcntl \
      pdo_mysql \
      sockets \
      xsl \
      zip \
    && pecl install apcu pcov \
    && curl -Ls https://github.com/websupport-sk/pecl-memcache/archive/NON_BLOCKING_IO_php7.tar.gz | tar xz -C / \
    && cd /pecl-memcache-NON_BLOCKING_IO_php7 \
    && phpize && ./configure && make && make install \
    && cd / && rm -rf /pecl-memcache-NON_BLOCKING_IO_php7 \
    && docker-php-ext-enable apcu memcache pcov \
    && apk add --no-cache --virtual .phpext-rundeps \
      gettext \
      libxslt \
      libmemcached-libs \
      libzip \
    && apk add --update-cache --repository http://dl-3.alpinelinux.org/alpine/edge/testing/ --allow-untrusted \
      php8-pecl-memprof \
    && apk del .phpext-builddeps \
    && pecl clear-cache \
    && apk add --no-cache --virtual .atom-deps \
      openjdk8-jre-base \
      ffmpeg \
      imagemagick \
      ghostscript \
      poppler-utils \
      npm \
      make \
      bash \
      gnu-libiconv \
      fcgi \
    && npm install -g npm "less@<4.0.0" \
    && curl -Ls https://archive.apache.org/dist/xmlgraphics/fop/binaries/fop-2.1-bin.tar.gz | tar xz -C /usr/share \
    && ln -sf /usr/share/fop-2.1/fop /usr/local/bin/fop

COPY --from=composer:2 /usr/bin/composer /usr/bin/composer

COPY composer.* /atom/build/

RUN set -xe && composer install -d /atom/build

COPY package* /atom/build/

RUN set -xe && npm install --prefix /atom/build

COPY . /atom/src

WORKDIR /atom/src

RUN set -xe \
    && mv /atom/build/vendor/composer vendor/ \
    && mv /atom/build/node_modules . \
    && make -C plugins/arDominionPlugin \
    && make -C plugins/arArchivesCanadaPlugin \
    && npm run build \
    && rm -rf /atom/build

ENTRYPOINT ["docker/entrypoint.sh"]

CMD ["fpm"]
```

And below is the build error that occurred when trying to build the Dockerfile:
# Build Error
```> [stage-0  2/10] RUN set -xe     && apk add --no-cache --virtual .phpext-builddeps       gettext-dev       libxslt-dev       zlib-dev       libmemcached-dev       libzip-dev       oniguruma-dev       autoconf       build-base     && docker-php-ext-install       calendar       gettext       mbstring       mysqli       opcache       pcntl       pdo_mysql       sockets       xsl       zip     && pecl install apcu pcov     && curl -Ls https://github.com/websupport-sk/pecl-memcache/archive/NON_BLOCKING_IO_php7.tar.gz | tar xz -C /     && cd /pecl-memcache-NON_BLOCKING_IO_php7     && phpize && ./configure && make && make install     && cd / && rm -rf /pecl-memcache-NON_BLOCKING_IO_php7     && docker-php-ext-enable apcu memcache pcov     && apk add --no-cache --virtual .phpext-rundeps       gettext       libxslt       libmemcached-libs       libzip     && apk add --update-cache --repository http://dl-3.alpinelinux.org/alpine/edge/testing/ --allow-untrusted       php8-pecl-memprof     && apk del .phpext-builddeps     && pecl clear-cache     && apk add --no-cache --virtual .atom-deps       openjdk8-jre-base       ffmpeg       imagemagick       ghostscript       poppler-utils       npm       make       bash       gnu-libiconv       fcgi     && npm install -g npm "less@<4.0.0"     && curl -Ls https://archive.apache.org/dist/xmlgraphics/fop/binaries/fop-2.1-bin.tar.gz | tar xz -C /usr/share     && ln -sf /usr/share/fop-2.1/fop /usr/local/bin/fop:
fetch https://dl-cdn.alpinelinux.org/alpine/v3.16/main/x86_64/APKINDEX.tar.gz
fetch https://dl-cdn.alpinelinux.org/alpine/v3.16/community/x86_64/APKINDEX.tar.gz
(1/1) Installing .phpext-rundeps (20240801.083847)
OK: 253 MiB in 83 packages
+ apk add --update-cache --repository http://dl-3.alpinelinux.org/alpine/edge/testing/ --allow-untrusted php8-pecl-memprof
fetch http://dl-3.alpinelinux.org/alpine/edge/testing/x86_64/APKINDEX.tar.gz
fetch https://dl-cdn.alpinelinux.org/alpine/v3.16/main/x86_64/APKINDEX.tar.gz
fetch https://dl-cdn.alpinelinux.org/alpine/v3.16/community/x86_64/APKINDEX.tar.gz
ERROR: unable to select packages:
  php8-pecl-memprof (no such package):
    required by: world[php8-pecl-memprof]
ERROR: process "/bin/sh -c set -xe     && apk add --no-cache --virtual .phpext-builddeps       gettext-dev       libxslt-dev       zlib-dev       libmemcached-dev       libzip-dev       oniguruma-dev       autoconf       build-base     && docker-php-ext-install       calendar       gettext       mbstring       mysqli       opcache       pcntl       pdo_mysql       sockets       xsl       zip     && pecl install apcu pcov     && curl -Ls https://github.com/websupport-sk/pecl-memcache/archive/NON_BLOCKING_IO_php7.tar.gz | tar xz -C /     && cd /pecl-memcache-NON_BLOCKING_IO_php7     && phpize && ./configure && make && make install     && cd / && rm -rf /pecl-memcache-NON_BLOCKING_IO_php7     && docker-php-ext-enable apcu memcache pcov     && apk add --no-cache --virtual .phpext-rundeps       gettext       libxslt       libmemcached-libs       libzip     && apk add --update-cache --repository http://dl-3.alpinelinux.org/alpine/edge/testing/ --allow-untrusted       php8-pecl-memprof     && apk del .phpext-builddeps     && pecl clear-cache     && apk add --no-cache --virtual .atom-deps       openjdk8-jre-base       ffmpeg       imagemagick       ghostscript       poppler-utils       npm       make       bash       gnu-libiconv       fcgi     && npm install -g npm \"less@<4.0.0\"     && curl -Ls https://archive.apache.org/dist/xmlgraphics/fop/binaries/fop-2.1-bin.tar.gz | tar xz -C /usr/share     && ln -sf /usr/share/fop-2.1/fop /usr/local/bin/fop" did not complete successfully: exit code: 1```

Your task is to repair the Dockerfile based on the Dockerfile and its build error provided. To solve the problem, first, you should diagnose which part is causing the flakiness and why. Then, according to the characteristics of that flakiness, repair the Dockerfile. the output Dockerfile must be within five angle brackets:
    <<<<<
    Dockerfile content 
    >>>>>
